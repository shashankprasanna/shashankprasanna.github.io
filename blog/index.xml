<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shashank Prasanna – Personal Blog</title><link>http://localhost:1313/blog/</link><description>Recent content in Personal Blog on Shashank Prasanna</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 08 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Benchmarking Modular Mojo🔥 and PyTorch torch.compile() on Mandelbrot function</title><link>http://localhost:1313/benchmarking-modular-mojo-and-pytorch-torch.compile-on-mandelbrot-function/</link><pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate><guid>http://localhost:1313/benchmarking-modular-mojo-and-pytorch-torch.compile-on-mandelbrot-function/</guid><description>
&lt;img src="http://localhost:1313/benchmarking-modular-mojo-and-pytorch-torch.compile-on-mandelbrot-function/featured_hu52d0dfd7da44399cff6626242a002e0e_3253184_640x0_resize_catmullrom_3.png" width="640" height="457"/>
&lt;figure class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 310px">
&lt;img class="card-img-top" src="http://localhost:1313/benchmarking-modular-mojo-and-pytorch-torch.compile-on-mandelbrot-function/featured_hu52d0dfd7da44399cff6626242a002e0e_3253184_300x300_fit_catmullrom_3.png" width="300" height="214">
&lt;figcaption class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
PyTorch's got some Mojo
&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Last week Modular, a startup co-founded by Chris Lattner (of LLVM, Swift, MLIR fame), announced a brand new high-performance language called Mojo🔥. Mojo🔥 looks and reads like Python but that&amp;rsquo;s only on the surface, underneath the Python syntax Mojo uses it&amp;rsquo;s own JIT and AOT compilation process to accelerate Python code. Although Mojo doesn&amp;rsquo;t fully support all of Python today, according to Mojo docs, over time Mojo is expected to become a superset of Python.&lt;/p>
&lt;p>Mojo isn&amp;rsquo;t open-source yet and can only be accessed from the Mojo playground. So I promptly applied for access after the accouncement on May 3rd, and I got access to the Mojo playground in a couple of days. First thing I wanted to do was to compare Mojo&amp;rsquo;s performance to PyTorch. While PyTorch is popular for deep learning, you may not have realized that it&amp;rsquo;s an almost complete replace for numpy and a high-performance scientific computing library.&lt;/p>
&lt;p>And my favorite feature of PyTorch is the new &lt;code>torch.compile()&lt;/code> API introduced in PyTorch 2.0 that can accelerate arbitrary functions (with limitations) written using the PyTorch API. It takes PyTorch highlevel API, optimizes it and generates C++ or GPU code to improve it&amp;rsquo;s performance. I&amp;rsquo;ve discussed &lt;code>torch.compile()&lt;/code> in great detail in my blog post, and I highly recommend reading it if you want to learn about how PyTorch compiler does operator fusion and CPU/GPU code-generation:&lt;/p>
&lt;div class="td-card card mb-4">
&lt;div class="card-body">
&lt;h5 class="card-title">
&lt;i class='fa-brands fa-medium'>&lt;/i> &lt;a href="https://medium.com/towards-data-science/how-pytorch-2-0-accelerates-deep-learning-with-operator-fusion-and-cpu-gpu-code-generation-35132a85bd26">How Pytorch 2.0 Accelerates Deep Learning with Operator Fusion and CPU/GPU Code-Generation&lt;/a> &lt;img src="https://miro.medium.com/v2/resize:fit:200/format:webp/1*m3hHjaqAY_Rqwcvgfg4IoQ.png" alt="">
&lt;/h5>
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>To compare Mojo🔥 and PyTorch, I picked the Mandelbrot example that Jeremy Howard (or FastAI fame) demoed during the keynote. I reimplemnted Mojo&amp;rsquo;s Mandelbrot example in PyTorch and compared it&amp;rsquo;s performance. Before I get into the code, here are the results.&lt;/p>
&lt;p>&lt;strong>Summary: Mojo is fast! and PyTorch is no slouch either!&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Language/Framework&lt;/th>
&lt;th>Mandelbrot execution&lt;br>(200 iterations)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>PyTorch GPU &lt;code>torch.compile()&lt;/code>&lt;/td>
&lt;td>~165 μs (micro seconds)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mojo CPU&lt;/td>
&lt;td>~2.6 ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PyTorch CPU &lt;code>torch.compile()&lt;/code>&lt;/td>
&lt;td>~9 ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PyTorch GPU&lt;/td>
&lt;td>~15 ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PyTorch CPU&lt;/td>
&lt;td>~50 ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PyTorch Apple M2 MPS&lt;/td>
&lt;td>~70 ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Python/numpy&lt;/td>
&lt;td>~152 ms&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>It should come as no surprise that PyTorch generated custom fused kernel for Mandelbrot function running on GPU is indeed faster than CPU. PyTorch is only slightly slower, but makes up for performance with better usability, to which I&amp;rsquo;m sure Mojo will catch up to in the future.&lt;/p>
&lt;h2 id="benchmarks-and-caveats">Benchmarks and caveats&lt;/h2>
&lt;p>This is not a scientific benchmark test. This is a rather crude, and hacked-together-in-a-day example that should illustrate the performance differences and coding approaches, so take it with a grain of Sodium Chloride. &lt;strong>Methodology&lt;/strong>: I use Jupyter&amp;rsquo;s native &lt;code>timeit&lt;/code> with &lt;code>10&lt;/code> repeats to benchmark and report mean and variance. For GPU, I also call &lt;code>torch.cuda.synchronize()&lt;/code> before measurement to ensure that the kernel is fully executed before the timer starts. This code example also benchmarks tensors/arrays creation which is in the body of the function, which migh not be a feature that arises in real-world scenarios.&lt;/p>
&lt;h3 id="hardware-differences">Hardware differences&lt;/h3>
&lt;p>Mojo is not open-source (yet), and the only way to run it is on the early access Mojo Playground which has a 32 core Xeon CPU. My desktop running PyTorch is an olded 8-core i9700 CPU with an NVIDIA Titan V GPU. I also benchmarked the PyTorch code on my MacBook Pro with Apple M2 chip using PyTorch&amp;rsquo;s MPS support.&lt;/p>
&lt;h2 id="why-is-pytorch-so-much-faster-than-pythonnumpy-on-cpu">Why is PyTorch so much faster than Python/Numpy on CPU?&lt;/h2>
&lt;p>PyTorch is faster than Python/Numpy because the higher level PyTorch API calls highly optimized C++ routines implemented in the ATen library. These routines are still eagerly evaluated, which means that each PyTorch API call is executed immediately which adds some function call overhead with every API call. PyTorch 2.0 introduced a compilation API called &lt;code>torch.compile()&lt;/code> which takes eager PyTorch code, optimizes it and generates C++ code with OpenMP pragmas for parallelization on CPU or generates GPU code using OpenAI Triton. This is similar to what Numba does for Python code, but PyTorch 2.0&amp;rsquo;s &lt;code>torch.compile()&lt;/code> is much more powerful because it can fuse multiple PyTorch API calls into a single kernel, which reduces function call overhead and improves performance.&lt;/p>
&lt;p>This is what the automatically generated fused kernels for C++ for CPU and OpenAI Triton for GPU look like for Mandelbrot function (screenshot truncated)&lt;/p>
&lt;div class="td-card card mb-4">
&lt;div class="card-header">
&lt;h4 id="autogenerated-c-code-for-mandelbrot-function-with-torchcompile">Autogenerated C++ code for Mandelbrot function with &lt;code>torch.compile()&lt;/code>&lt;/h4>
&lt;/div>
&lt;div class="card-body">
&lt;h5 class="card-title">
&lt;img src="mandelbrot_cpp_fused.png" alt="">
&lt;/h5>
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="td-card card mb-4">
&lt;div class="card-header">
&lt;h4 id="autogenerated-openai-triton-code-for-mandelbrot-function-with-torchcompile">Autogenerated OpenAI Triton code for Mandelbrot function with &lt;code>torch.compile()&lt;/code>&lt;/h4>
&lt;/div>
&lt;div class="card-body">
&lt;h5 class="card-title">
&lt;img src="mandelbrot_gpu_fused.png" alt="">
&lt;/h5>
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="baseline-benchmarking-pythonnumpy">Baseline: Benchmarking Python/Numpy&lt;/h2>
&lt;p>Let&amp;rsquo;s start with a baseline. Here&amp;rsquo;s the Python/Numpy implementation of Mandelbrot function. I&amp;rsquo;ve also included a function to plot the Mandelbrot set using matplotlib. We&amp;rsquo;ll later modify this function to use PyTorch.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> torch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.colors &lt;span style="color:#66d9ef">as&lt;/span> colors
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> warnings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">mandelbrot_numpy&lt;/span>(max_iter&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">200&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Define the boundaries of the complex plane&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">450&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> yn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">375&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xmin &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2.25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xmax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.75&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ymin &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1.25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ymax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1.25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Create the grid of complex numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x_values &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>linspace(xmin, xmax, xn, dtype&lt;span style="color:#f92672">=&lt;/span>np&lt;span style="color:#f92672">.&lt;/span>float64)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y_values &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>linspace(ymin, ymax, yn, dtype&lt;span style="color:#f92672">=&lt;/span>np&lt;span style="color:#f92672">.&lt;/span>float64)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rx, iy &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>meshgrid(x_values, y_values, indexing&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;xy&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#f92672">=&lt;/span> rx&lt;span style="color:#f92672">.&lt;/span>copy()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#f92672">=&lt;/span> iy&lt;span style="color:#f92672">.&lt;/span>copy()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mask &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>zeros_like(x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(max_iter):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x_prev &lt;span style="color:#f92672">=&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y_prev &lt;span style="color:#f92672">=&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#f92672">=&lt;/span> x_prev&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">-&lt;/span> y_prev&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> rx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>x_prev&lt;span style="color:#f92672">*&lt;/span>y_prev &lt;span style="color:#f92672">+&lt;/span> iy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inside &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>sqrt(x&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> y&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mask&lt;span style="color:#f92672">+=&lt;/span>inside
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> mask
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_plot_python&lt;/span>(m):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">450&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> yn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">375&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dpi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> width &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> height &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">*&lt;/span> yn &lt;span style="color:#f92672">//&lt;/span> xn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fig &lt;span style="color:#f92672">=&lt;/span> plt&lt;span style="color:#f92672">.&lt;/span>figure(&lt;span style="color:#ae81ff">1&lt;/span>, [width, height], dpi&lt;span style="color:#f92672">=&lt;/span>dpi)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax &lt;span style="color:#f92672">=&lt;/span> fig&lt;span style="color:#f92672">.&lt;/span>add_axes([&lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">1.0&lt;/span>, &lt;span style="color:#ae81ff">1.0&lt;/span>], frame_on&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>, aspect&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> light &lt;span style="color:#f92672">=&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>LightSource(&lt;span style="color:#ae81ff">315&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image &lt;span style="color:#f92672">=&lt;/span> light&lt;span style="color:#f92672">.&lt;/span>shade(m, plt&lt;span style="color:#f92672">.&lt;/span>cm&lt;span style="color:#f92672">.&lt;/span>hot, colors&lt;span style="color:#f92672">.&lt;/span>PowerNorm(&lt;span style="color:#ae81ff">0.3&lt;/span>), blend_mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;hsv&amp;#39;&lt;/span>, vert_exag&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1.5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>imshow(image)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>axis(&lt;span style="color:#e6db74">&amp;#34;off&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output:&lt;/strong>
With this baseline let&amp;rsquo;s compare the performance of PyTorch and Mojo.
&lt;img src="mandel_numpy.png" alt="">&lt;/p>
&lt;h2 id="benchmarking-mojo-on-the-mojo-playground">Benchmarking Mojo on the Mojo playground&lt;/h2>
&lt;p>This comparision is a bit unfair because Mojo🔥 playground has a 32 core Xeon CPU, but I only have a modest 4 year old 8 core desktop CPU. The clock frequency, memory bandwidth and cache sizes and number of cores are all different, but I can&amp;rsquo;t install PyTorch on Mojo playground so this is the best I can do for comparision for now.&lt;/p>
&lt;p>At the bottom of this notebook, I add these few lines of code to measure the execution time of the mandelbrot function.&lt;/p>
&lt;p>&lt;img src="mojo_playground.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Time &lt;span style="color:#f92672">import&lt;/span> now
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>let eval_begin &lt;span style="color:#f92672">=&lt;/span> now()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>let mandelbrot_set &lt;span style="color:#f92672">=&lt;/span> compute_mandelbrot_simd()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>let eval_end &lt;span style="color:#f92672">=&lt;/span> now()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>let execution_time &lt;span style="color:#f92672">=&lt;/span> (eval_end &lt;span style="color:#f92672">-&lt;/span> eval_begin)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;execution_time:&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(F64(execution_time) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">1000000&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;p>&lt;img src="benchmark_mojo.png" alt="">&lt;/p>
&lt;h2 id="benchmarking-pytorch-cpu">Benchmarking PyTorch CPU&lt;/h2>
&lt;p>To update our mandelbrot function from numpy implementation to PyTorch implementation I made the following small changes&lt;/p>
&lt;ul>
&lt;li>replace &lt;code>np&lt;/code> with &lt;code>torch&lt;/code>&lt;/li>
&lt;li>add &lt;code>device=device&lt;/code> to the tensor creation calls, this allows us to pass the appropriate CPU, GPU or Apple MPS device to PyTorch.&lt;/li>
&lt;/ul>
&lt;p>Updated mandelbrot function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">mandelbrot_pytorch&lt;/span>(device&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cpu&amp;#39;&lt;/span>, max_iter&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">200&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Define the boundaries of the complex plane&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">450&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> yn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">375&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xmin &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2.25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xmax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.75&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ymin &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1.25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ymax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1.25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Create the grid of complex numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x_values &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>linspace(xmin, xmax, xn, device&lt;span style="color:#f92672">=&lt;/span>device)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y_values &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>linspace(ymin, ymax, yn, device&lt;span style="color:#f92672">=&lt;/span>device)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rx, iy &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>meshgrid(x_values, y_values, indexing&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;xy&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#f92672">=&lt;/span> rx&lt;span style="color:#f92672">.&lt;/span>clone()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#f92672">=&lt;/span> iy&lt;span style="color:#f92672">.&lt;/span>clone()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mask &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>zeros_like(x, device&lt;span style="color:#f92672">=&lt;/span>device)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(max_iter):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x_prev &lt;span style="color:#f92672">=&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y_prev &lt;span style="color:#f92672">=&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#f92672">=&lt;/span> x_prev&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">-&lt;/span> y_prev&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> rx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>x_prev&lt;span style="color:#f92672">*&lt;/span>y_prev &lt;span style="color:#f92672">+&lt;/span> iy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inside &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>sqrt(x&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> y&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mask&lt;span style="color:#f92672">+=&lt;/span>inside
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> mask
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s call our &lt;code>mandelbrot_pytorch&lt;/code> function with &lt;code>device='cpu'&lt;/code>
&lt;img src="mandel_pytorch_cpu.png" alt="">&lt;/p>
&lt;h2 id="benchmarking-pytorch-cpu-with-torchcompile">Benchmarking PyTorch CPU with &lt;code>torch.compile()&lt;/code>&lt;/h2>
&lt;p>You can compile PyTorch functions using &lt;code>torch.compile()&lt;/code> and TorchInductor will optimize and generate C++ code with OpenMP pragmas for parallization. This will significantly improve the performance of the function. All of this happens under the hood when you run the code below, but you can pass an additional argument &lt;code>options={'trace.enabled':True}&lt;/code> to see the generated code. I discuss this is further detail in my PyTorch 2.0 blog post:
&lt;div class="td-card card mb-4">
&lt;div class="card-body">
&lt;h5 class="card-title">
&lt;i class='fa-brands fa-medium'>&lt;/i> &lt;a href="https://medium.com/towards-data-science/how-pytorch-2-0-accelerates-deep-learning-with-operator-fusion-and-cpu-gpu-code-generation-35132a85bd26">How Pytorch 2.0 Accelerates Deep Learning with Operator Fusion and CPU/GPU Code-Generation&lt;/a> &lt;img src="https://miro.medium.com/v2/resize:fit:100/format:webp/1*m3hHjaqAY_Rqwcvgfg4IoQ.png" alt="">
&lt;/h5>
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/p>
&lt;p>Let&amp;rsquo;s compile our mandelbrot function for CPU backend:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>device &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;cpu&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mandelbrot_compiled &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>compile(mandelbrot_pytorch)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mandelbrot_set &lt;span style="color:#f92672">=&lt;/span> mandelbrot_compiled(device)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make_plot_python(mandelbrot_set&lt;span style="color:#f92672">.&lt;/span>numpy())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output&lt;/strong>
&lt;img src="mandel_pytorch_cpu_compile.png" alt="">&lt;/p>
&lt;p>The generated C++ code looks like this&lt;/p>
&lt;figure class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 773px">
&lt;img class="card-img-top" src="http://localhost:1313/benchmarking-modular-mojo-and-pytorch-torch.compile-on-mandelbrot-function/mandelbrot_cpp_fused_hu7e430cbf97eb3e8735ed525bf4b9a7bc_268273_800x400_fit_catmullrom_3.png" width="763" height="400">
&lt;figcaption class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="benchmarking-pytorch-gpu">Benchmarking PyTorch GPU&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>device &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;cuda&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mandelbrot_set &lt;span style="color:#f92672">=&lt;/span> mandelbrot_pytorch(device)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make_plot_python(mandelbrot_set&lt;span style="color:#f92672">.&lt;/span>cpu()&lt;span style="color:#f92672">.&lt;/span>numpy())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output&lt;/strong>
&lt;img src="mandel_pytorch_gpu.png" alt="">&lt;/p>
&lt;h2 id="benchmarking-pytorch-gpu-with-torchcompile">Benchmarking PyTorch GPU with &lt;code>torch.compile()&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>device &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;cuda&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mandelbrot_compiled &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>compile(mandelbrot_pytorch)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mandelbrot_set &lt;span style="color:#f92672">=&lt;/span> mandelbrot_compiled(device)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make_plot_python(mandelbrot_set&lt;span style="color:#f92672">.&lt;/span>cpu()&lt;span style="color:#f92672">.&lt;/span>numpy())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="mandel_pytorch_gpu_compile.png" alt="">&lt;/p>
&lt;p>The generated OpenAI Triton code which gets compiled to NVPTX for GPUs, looks like this&lt;/p>
&lt;figure class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 728px">
&lt;img class="card-img-top" src="http://localhost:1313/benchmarking-modular-mojo-and-pytorch-torch.compile-on-mandelbrot-function/mandelbrot_gpu_fused_huc397d05ec5af180dad415181b17e01e2_296767_800x400_fit_catmullrom_3.png" width="718" height="400">
&lt;figcaption class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="benchmarking-pytorch-apple-m1-silicon-with-mps-support">Benchmarking PyTorch Apple M1 Silicon with MPS support&lt;/h2>
&lt;p>&lt;img src="mandel_pytorch_apple_m2.png" alt="">&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>That&amp;rsquo;s it folks! I hope you enjoyed this quick comparision of PyTorch and Mojo🔥.
Mojo is fast, but doesn&amp;rsquo;t have the same level of usability as PyTorch, but it&amp;rsquo;s just a matter of time and community support. PyTorch&amp;rsquo;s one-two punch combo of eager mode and high-level Tensor API and &lt;code>torch.compile()&lt;/code> is a powerful combination today. But the PyTorch ecosystem is quite fragmented today with multiple paths for different accelerators: TorchInductor (GPUs, CPUs), XLA (TPU, AWS Tranium/Inferentia), custom bindings/bridges (Intel Habana, MPS). The biggest benefit of Mojo that I see is the ability to write OpenAI style kernel code in the same language, which would make supporting custom ops for inference easier. Exciting times for AI Infra and acceleration, and I&amp;rsquo;m just excited to see we&amp;rsquo;ll experience another LLVM moment in the AI.&lt;/p></description></item><item><title>Blog: How Pytorch 2.0 accelerates deep learning with operator fusion and CPU/GPU code-generation</title><link>http://localhost:1313/how-pytorch-2.0-accelerates-deep-learning-with-operator-fusion-and-cpu/gpu-code-generation/</link><pubDate>Sun, 30 Apr 2023 00:00:00 +0000</pubDate><guid>http://localhost:1313/how-pytorch-2.0-accelerates-deep-learning-with-operator-fusion-and-cpu/gpu-code-generation/</guid><description>
&lt;img src="http://localhost:1313/how-pytorch-2.0-accelerates-deep-learning-with-operator-fusion-and-cpu/gpu-code-generation/featured_hu0fb5b15bba115eaa0a2341edd31b99b2_23922_640x0_resize_catmullrom_3.png" width="640" height="367"/>
&lt;p>Computer programming is magical. We write code in human readable languages, and as though by magic, it gets translated into electric currents through silicon transistors making them behave like switches and allowing them to implement complex logic — just so we can enjoy cat videos on the internet. Between the programming language and hardware processors that run it, is an important piece of technology — the compiler. A compiler’s job is to translate and simplify our human readable language code into instructions that a processor understands.&lt;/p>
&lt;p>Compilers play a very important role in deep learning to improve training and inference performance, improve energy efficiency, and target diverse AI accelerator hardware. In this blog post I’m going to discuss deep learning compiler technologies that powers PyTorch 2.0. I’ll walk you through the different phases of the compilation process and discuss various underlying technologies with code examples and visualizations.&lt;/p>
&lt;div class="td-card card mb-4">
&lt;div class="card-body">
&lt;h5 class="card-title">
Read the full blog post here: &lt;br>&lt;br> &lt;i class='fa-brands fa-medium'>&lt;/i> &lt;a href="https://medium.com/towards-data-science/how-pytorch-2-0-accelerates-deep-learning-with-operator-fusion-and-cpu-gpu-code-generation-35132a85bd26">How Pytorch 2.0 Accelerates Deep Learning with Operator Fusion and CPU/GPU Code-Generation&lt;/a>
&lt;/h5>
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;div class="card-footer">
&lt;img src="featured.png" alt="">
&lt;/div>
&lt;/div></description></item><item><title>Blog: AI Accelerators and Machine Learning Algorithms: Co-Design and Evolution</title><link>http://localhost:1313/ai-accelerators-and-machine-learning-algorithms-co-design-and-evolution/</link><pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate><guid>http://localhost:1313/ai-accelerators-and-machine-learning-algorithms-co-design-and-evolution/</guid><description>
&lt;img src="http://localhost:1313/ai-accelerators-and-machine-learning-algorithms-co-design-and-evolution/featured_hu153888cb09e42ad7fc9ab1679dae3388_33262_640x0_resize_catmullrom_3.png" width="640" height="361"/>
&lt;p>If you told me a few years ago that data scientists would be using Docker containers in their day to day work, I wouldn’t have believed you. As a member of the broader machine learning (ML) community I always considered Docker, Kubernetes, Swarm (remember that?) exotic infrastructure tools for IT/Ops experts. Today it’s a different story, rarely a day goes by when I don’t use a Docker container for training or hosting a model.
An attribute of machine learning development that makes it different from traditional software development is that it relies on specialized hardware such as GPUs, Habana Gaudi, AWS Inferentia to accelerate training and inference. This makes it challenging to have containerized deployments that are hardware-agnostic, which is one of the key benefits of containers. In this blog post I’ll discuss how Docker and container technologies have evolved to address this challenge. We’ll discuss:&lt;/p>
&lt;ul>
&lt;li>Why Docker has become an essential tool for machine learning today and how it addresses machine learning specific challenges&lt;/li>
&lt;li>How Docker accesses specialized hardware resources on heterogeneous systems that have more than one type of processor (CPU + AI accelerators).&lt;/li>
&lt;li>How different AI accelerators extend Docker for hardware access with examples of 1/ NVIDIA GPUs and NVIDIA Container Toolkit and 2/ AWS Inferentia and Neuron SDK support for containers&lt;/li>
&lt;li>How to scale Docker containers on Kubernetes with hardware accelerated nodes&lt;/li>
&lt;/ul>
&lt;div class="td-card card mb-4">
&lt;div class="card-body">
&lt;h5 class="card-title">
Read the full blog post here: &lt;br>&lt;br> &lt;i class='fa-brands fa-medium'>&lt;/i> &lt;a href="https://medium.com/towards-data-science/how-docker-runs-machine-learning-on-nvidia-gpus-aws-inferentia-and-other-hardware-ai-accelerators-e076c6eb7802">How Docker Runs Machine Learning on NVIDIA GPUs, AWS Inferentia, and Other Hardware AI Accelerators&lt;/a>
&lt;/h5>
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;div class="card-footer">
&lt;img src="featured.png" alt="">
&lt;/div>
&lt;/div></description></item><item><title>Blog: How Docker Runs Machine Learning on NVIDIA GPUs, AWS Inferentia, and Other Hardware AI Accelerators</title><link>http://localhost:1313/how-docker-runs-machine-learning-on-nvidia-gpus-aws-inferentia-and-other-hardware-ai-accelerators/</link><pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate><guid>http://localhost:1313/how-docker-runs-machine-learning-on-nvidia-gpus-aws-inferentia-and-other-hardware-ai-accelerators/</guid><description>
&lt;img src="http://localhost:1313/how-docker-runs-machine-learning-on-nvidia-gpus-aws-inferentia-and-other-hardware-ai-accelerators/featured_hu40258b408388e57d94159bf91c739a7c_102531_640x0_resize_catmullrom_3.png" width="640" height="285"/>
&lt;p>If you told me a few years ago that data scientists would be using Docker containers in their day to day work, I wouldn’t have believed you. As a member of the broader machine learning (ML) community I always considered Docker, Kubernetes, Swarm (remember that?) exotic infrastructure tools for IT/Ops experts. Today it’s a different story, rarely a day goes by when I don’t use a Docker container for training or hosting a model.
An attribute of machine learning development that makes it different from traditional software development is that it relies on specialized hardware such as GPUs, Habana Gaudi, AWS Inferentia to accelerate training and inference. This makes it challenging to have containerized deployments that are hardware-agnostic, which is one of the key benefits of containers. In this blog post I’ll discuss how Docker and container technologies have evolved to address this challenge. We’ll discuss:&lt;/p>
&lt;ul>
&lt;li>Why Docker has become an essential tool for machine learning today and how it addresses machine learning specific challenges&lt;/li>
&lt;li>How Docker accesses specialized hardware resources on heterogeneous systems that have more than one type of processor (CPU + AI accelerators).&lt;/li>
&lt;li>How different AI accelerators extend Docker for hardware access with examples of 1/ NVIDIA GPUs and NVIDIA Container Toolkit and 2/ AWS Inferentia and Neuron SDK support for containers&lt;/li>
&lt;li>How to scale Docker containers on Kubernetes with hardware accelerated nodes&lt;/li>
&lt;/ul>
&lt;div class="td-card card mb-4">
&lt;div class="card-body">
&lt;h5 class="card-title">
Read the full blog post here:&lt;br>&lt;br> &lt;i class='fa-brands fa-medium'>&lt;/i> &lt;a href="https://medium.com/towards-data-science/ai-accelerators-machine-learning-algorithms-and-their-co-design-and-evolution-2676efd47179">How Docker Runs Machine Learning on NVIDIA GPUs, AWS Inferentia, and Other Hardware AI Accelerators&lt;/a>
&lt;/h5>
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;div class="card-footer">
&lt;img src="featured.png" alt="">
&lt;/div>
&lt;/div></description></item><item><title>Blog: Automatically generate code and documentation using OpenAI CODEX</title><link>http://localhost:1313/automatically-generate-code-and-documentation-using-openai-codex/</link><pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate><guid>http://localhost:1313/automatically-generate-code-and-documentation-using-openai-codex/</guid><description>
&lt;img src="http://localhost:1313/automatically-generate-code-and-documentation-using-openai-codex/screenshot8-featured_huc7ef144ea84a250195ff19b8f35ca83f_78825_640x0_resize_catmullrom_3.png" width="640" height="271"/>
&lt;p>We&amp;rsquo;ve all dealt with the frustration of poor or incomplete documentation in software projects. In their &lt;a href="https://octoverse.github.com/creating-documentation/">2021 state of the Octoverse survey&lt;/a>, GitHub found that easy to use documentation, boosted developer productivity by 50% and improved contribution quality, yet it continues to be an under-invested area across open-source projects.&lt;/p>
&lt;p>Using OpenAI Codex you can use to automatically edit existing code to add documentation using only natural language instructions. This new feature will let you spend more time developing new features and reviewing generated documentation instead of writing documentation from scratch. In addition to generating documentation, Codex&amp;rsquo;s edit feature can refactor code, update logic, translate between programming languages and change coding styles.&lt;/p>
&lt;p>In this blog post, we&amp;rsquo;ll take a look at how Codex edit feature works through a code example. One of my favorite areas of machine learning (ML) research is automated machine learning (AutoML) or low-code ML. I&amp;rsquo;ll use Codex to implement a simple data science workflow only using natural language instructions and without writing any ML code. We&amp;rsquo;ll perform the following steps only using Codex&amp;rsquo;s Edit API and discuss its features as we implement the code example:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Generate python code to load a dataset and visualize it&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Generate python code to train a machine learning classifier on the dataset&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Edit generated code to customize it for the specific problem dataset&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Edit updated code to add detailed documentation&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Sounds exciting? Let&amp;rsquo;s get started!&lt;/p>
&lt;h2 id="using-openai-codex-edit-feature-to-generate-fully-documented-code-to-train-a-classifier-on-a-tabular-dataset">Using OpenAI Codex edit feature to generate fully documented code to train a classifier on a tabular dataset&lt;/h2>
&lt;p>Let&amp;rsquo;s use OpenAI Codex to solve the &lt;a href="https://www.kaggle.com/c/titanic/data">Titanic - Machine Learning from Disaster&lt;/a> Kaggle competition. The titanic dataset consists of passenger information like name, age, gender, etc. and if they survived the disaster or not. We&amp;rsquo;ll use natural language prompts to iteratively build code and documentation. To download the dataset, you&amp;rsquo;ll need to create a free Kaggle account and download it either via the web page or by following the instructions on the &lt;a href="https://github.com/Kaggle/kaggle-api">Kaggle API GitHub page&lt;/a>.&lt;/p>
&lt;p>Next, you&amp;rsquo;ll need an Open AI account. If you&amp;rsquo;re new to OpenAI, head over to &lt;a href="https://openai.com/api/login/">https://openai.com/api/login/&lt;/a> and create your free trial account. This will give you access to $18 in free credit that you can use for upto 3 months.&lt;/p>
&lt;p>After you&amp;rsquo;ve created your account, you&amp;rsquo;ll have access to your unique API keys that you can use to invoke the OpenAI API using the official &lt;a href="https://beta.openai.com/docs/libraries/python-bindings">Python&lt;/a>, Node.js or any of the &lt;a href="https://beta.openai.com/docs/libraries/community-libraries">community supported libraries&lt;/a>. Since our example generates Python code, we&amp;rsquo;ll use the Python bindings.&lt;/p>
&lt;h3 id="step-1-setting-up-openai-python-package">Step 1: Setting up OpenAI Python package&lt;/h3>
&lt;p>Open your favorite IDE to get started, I prefer Jupyter Lab as it&amp;rsquo;s the most popular IDE used by data scientists. Import openai Python package and specify your organization and API keys. You can find these on your Open AI account.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> openai
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openai&lt;span style="color:#f92672">.&lt;/span>organization &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;org-XXXXXXXXXXXXXXX&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openai&lt;span style="color:#f92672">.&lt;/span>api_key &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sk-XXXXXXXXXXXXXXXX&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step-2-generate-python-code-to-load-an-analyze-the-dataset">Step 2: Generate python code to load an analyze the dataset&lt;/h3>
&lt;p>We can use the Codex edit feature to edit existing code or generate new code. Let&amp;rsquo;s start by generating some fresh code to load our Titanic CSV dataset and analyze it.&lt;/p>
&lt;p>Here&amp;rsquo;s what the arguments to the create() function mean:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Input&lt;/strong>: Provide a prompt as a starting point. We leave it empty since we&amp;rsquo;re going to generate new code and not edit existing code.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Instructions&lt;/strong>: Provide instructions to Codex on what code to generate. Here we describe that we want to generate code to load and analyze our CSV dataset.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Engine&lt;/strong>: Provide the engine for Codex edit feature, the latest name and version is &lt;code>Code-davinci-edit-001&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Temperature&lt;/strong> and &lt;strong>top_p&lt;/strong>: used to control how deterministic the model is in generating a response. I choose a lower value for top_p (=0.2) to get a consistent response.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>You can find more information about the API in the &lt;a href="https://beta.openai.com/docs/api-reference/edits/create">Edits documentation&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> IPython.display &lt;span style="color:#f92672">import&lt;/span> display
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input_prompt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>instruction &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Write python function to load a CSV file called titanic.csv into a dataframe and use display function&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>response &lt;span style="color:#f92672">=&lt;/span> openai&lt;span style="color:#f92672">.&lt;/span>Edit&lt;span style="color:#f92672">.&lt;/span>create(input&lt;span style="color:#f92672">=&lt;/span>input_prompt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instruction&lt;span style="color:#f92672">=&lt;/span>instruction,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> engine&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;code-davinci-edit-001&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temperature&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> top_p&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.2&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output:&lt;/strong>&lt;/p>
&lt;p>When you run the code, you should see an output that looks like the screenshot below. From the output we can see that the dataset has both numeric and categorical variables. This information will come in handy later when we ask Codex to edit our function. For now, let&amp;rsquo;s continue to build on this program to classify the dataset.&lt;/p>
&lt;p>&lt;img src="screenshot1.png" alt="">&lt;/p>
&lt;h3 id="step-3-generate-a-python-program-to-classify-the-dataset">Step 3: Generate a Python program to classify the dataset&lt;/h3>
&lt;p>In this step, rather than leave the input prompt empty, let&amp;rsquo;s provide the function signature we expect so Codex can fill out the rest of the program. Under instructions we provide:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Write python function to load a CSV file and perform binary XGBoost classification on a target column:&lt;/li>
&lt;/ul>
&lt;p>Extending our previous example, we&amp;rsquo;ll ask Codex to generate a program to use XGBoost to classify our dataset based on a specified target variable. If you&amp;rsquo;re new to machine learning, XGBoost is a fantastic works-out-of-the-box classifier for tabular datasets that often requires little to no fine tuning to get acceptable results.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>input_prompt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">def csv_classification(csv_file, target_column):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>instruction &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Write python function to load a CSV file and perform binary XGBoost classification on a target column&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>response &lt;span style="color:#f92672">=&lt;/span> openai&lt;span style="color:#f92672">.&lt;/span>Edit&lt;span style="color:#f92672">.&lt;/span>create(input&lt;span style="color:#f92672">=&lt;/span>input_prompt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instruction&lt;span style="color:#f92672">=&lt;/span>instruction,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> engine&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;code-davinci-edit-001&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temperature&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> top_p&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>generated_code &lt;span style="color:#f92672">=&lt;/span> response[&lt;span style="color:#e6db74">&amp;#34;choices&amp;#34;&lt;/span>][&lt;span style="color:#ae81ff">0&lt;/span>][&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(generated_code)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output:&lt;/strong>&lt;/p>
&lt;p>Codex generates the following code to classify our dataset using XGBoost. If you&amp;rsquo;re new to machine learning, let&amp;rsquo;s just take a moment to appreciate how much time we saved by having Codex generate this vs. writing this from scratch. We still need to test if this code works, so let&amp;rsquo;s go ahead and do that in the next step.&lt;/p>
&lt;p>&lt;img src="screenshot2.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>exec(generated_code)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>csv_classification(&lt;span style="color:#e6db74">&amp;#39;titanic.csv&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Survived&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output:&lt;/strong>&lt;/p>
&lt;p>Oh no! the generated code throws an error! Not what we want to see, but let&amp;rsquo;s take a closer look at the error message. The error message says:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>We have categorical variables that need to be specified as categorical variables. If we go back to the output of Step 1, we can verify from that the Name, Sex, Ticket, Cabin and Embarked are indeed categorical.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Since we have categorical variables, we need to instruct XGBoost to enable categorical support using `enable_categorical` argument.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>To remedy this, let&amp;rsquo;s make Codex do all the hard work by simply copying the error message and including it in the instructions of the next step.&lt;/p>
&lt;p>&lt;img src="screenshot3.png" alt="">&lt;/p>
&lt;h3 id="step-4-fixing-errors-in-the-generated-code-by-updating-the-instructions">Step 4: Fixing errors in the generated code by updating the instructions&lt;/h3>
&lt;p>In this step, we start with the generated code from Step 3, and provide instructions to make changes specified in the error message. We provide the following instructions:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Update code to set dataframe columns Name, Sex, Ticket, Cabin, Embarked to categorical and set DMatrix parameter 'enable_categorical' to 'True'&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>input_prompt &lt;span style="color:#f92672">=&lt;/span> generated_code
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>instruction &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Update code to set dataframe columns Name, Sex, Ticket, Cabin, Embarked to categorical and set DMatrix parameter &amp;#39;enable_categorical&amp;#39; to &amp;#39;True&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>response &lt;span style="color:#f92672">=&lt;/span> openai&lt;span style="color:#f92672">.&lt;/span>Edit&lt;span style="color:#f92672">.&lt;/span>create(input&lt;span style="color:#f92672">=&lt;/span>input_prompt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instruction&lt;span style="color:#f92672">=&lt;/span>instruction,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> engine&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;code-davinci-edit-001&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temperature&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> top_p&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>generated_code &lt;span style="color:#f92672">=&lt;/span> response[&lt;span style="color:#e6db74">&amp;#34;choices&amp;#34;&lt;/span>][&lt;span style="color:#ae81ff">0&lt;/span>][&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(generated_code)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output:&lt;/strong>&lt;/p>
&lt;p>This generates updated code that addresses the categorical variable errors by converting the specified column into categorical and by setting enable_categorical to True when creating the XGBoost&amp;rsquo;s native DMatrix data structure. Again let&amp;rsquo;s take a moment to appreciate how little we had to do to generate code for a generic tabular data classifier using XGBoost.&lt;/p>
&lt;p>&lt;img src="screenshot4.png" alt="">&lt;/p>
&lt;p>Let&amp;rsquo;s go ahead and execute this code to train our classifier:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>exec(generated_code)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>csv_classification(&lt;span style="color:#e6db74">&amp;#39;titanic.csv&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Survived&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output:&lt;/strong>&lt;/p>
&lt;p>Sure enough, our code now runs without any issues and trains the classifier to 83% accuracy on the test set. Note that this is a very simple dataset, but the generated code can now be used for a number of tabular classification problems. Need to modify the code to change features? Just repeat the instructions in this step to specify what needs to be updated.&lt;/p>
&lt;p>&lt;img src="screenshot5.png" alt="">&lt;/p>
&lt;h3 id="step-5-generate-detailed-documentation">Step 5: Generate detailed documentation&lt;/h3>
&lt;p>Finally, let&amp;rsquo;s use the generated code and add detailed documentation to it using Codex. To do that we provide natural language instructions on how and where to add comments:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Add a detailed paragraph at the top of the code describing what the code is doing, and add detailed comments explaining every line of code&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>instruction &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Add a detailed paragraph at the top of the code describing what the code is doing, and add detailed comments explaining every line of code
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>response &lt;span style="color:#f92672">=&lt;/span> openai&lt;span style="color:#f92672">.&lt;/span>Edit&lt;span style="color:#f92672">.&lt;/span>create(input&lt;span style="color:#f92672">=&lt;/span>generated_code,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instruction&lt;span style="color:#f92672">=&lt;/span>instruction,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> engine&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;code-davinci-edit-001&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temperature&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> top_p&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>documented_code &lt;span style="color:#f92672">=&lt;/span> response[&lt;span style="color:#e6db74">&amp;#34;choices&amp;#34;&lt;/span>][&lt;span style="color:#ae81ff">0&lt;/span>][&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(documented_code)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output:&lt;/strong>&lt;/p>
&lt;p>Here you can see the detailed description of the full program, you can also see that the additional comments were automatically added under the function definition describing each line of code.&lt;/p>
&lt;p>&lt;img src="screenshot6.png" alt="">&lt;/p>
&lt;p>If you&amp;rsquo;re new to XGBoost, you can also use the generated documentation to learn about what each of the hyperparameters mean! Now you know that eta is actually the learning rate, and max_depth is the maximum depth of each of the 20 trees XGBoost uses. How cool is that?&lt;/p>
&lt;p>&lt;img src="screenshot7.png" alt="">&lt;/p>
&lt;p>We now have a fully functional and documented code that you can use to submit your results to the Titanic Kaggle competition!&lt;/p>
&lt;h2 id="now-its-your-turn">Now it&amp;rsquo;s your turn!&lt;/h2>
&lt;p>If this piqued your interest head on over to &lt;a href="https://openai.com/api/login/">https://openai.com/api/login/&lt;/a> and create your free trial account. I&amp;rsquo;m making all the code used in this blog post is available as a Jupyter notebook on GitHub so you can run the entire example with a single click&lt;/p>
&lt;p>Now it&amp;rsquo;s your turn! How will you use Codex&amp;rsquo;s new edit feature? Let me know by reaching out to me at &lt;a href="https://twitter.com/shshnkp">@shshnkp&lt;/a>
&lt;img src="screenshot8-featured.png" alt="">&lt;/p></description></item><item><title>Blog: A complete guide to AI accelerators for deep learning inference — GPUs, AWS Inferentia and Amazon Elastic Inference</title><link>http://localhost:1313/a-complete-guide-to-ai-accelerators-for-deep-learning-inference-gpus-aws-inferentia-and-amazon-elastic-inference/</link><pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate><guid>http://localhost:1313/a-complete-guide-to-ai-accelerators-for-deep-learning-inference-gpus-aws-inferentia-and-amazon-elastic-inference/</guid><description>
&lt;img src="http://localhost:1313/a-complete-guide-to-ai-accelerators-for-deep-learning-inference-gpus-aws-inferentia-and-amazon-elastic-inference/featured_hu153888cb09e42ad7fc9ab1679dae3388_33262_640x0_resize_catmullrom_3.png" width="640" height="361"/>
&lt;h3 id="lets-start-by-answering-the-question-what-is-an-ai-accelerator">Let’s start by answering the question “What is an AI accelerator?”&lt;/h3>
&lt;p>An AI accelerator is a dedicated processor designed to accelerate machine learning computations. Machine learning, and particularly its subset, deep learning is primarily composed of a large number of linear algebra computations, (i.e. matrix-matrix, matrix-vector operations) and these operations can be easily parallelized. AI accelerators are specialized hardware designed to accelerate these basic machine learning computations and improve performance, reduce latency and reduce cost of deploying machine learning based applications.&lt;/p>
&lt;h3 id="do-i-need-an-ai-accelerator-for-machine-learning-ml-inference">Do I need an AI accelerator for machine learning (ML) inference?&lt;/h3>
&lt;p>Let’s say you have an ML model as part of your software application. The prediction step (or inference) is often the most time consuming part of your application that directly affects user experience. A model that takes several hundreds of milliseconds to generate text translations or apply filters to images or generate product recommendations, can drive users away from your “sluggish”, “slow”, “frustrating to use” app.
By speeding up inference, you can reduce the overall application latency and deliver an app experience that can be described as “smooth”, “snappy”, and “delightful to use”. And you can speed up inference by offloading ML model prediction computation to an AI accelerator.
With great market needs comes great many product alternatives, so naturally there is more than one way to accelerate your ML models in the cloud.
In this blog post, I’ll explore three popular options:&lt;/p>
&lt;ol>
&lt;li>GPUs: Particularly, the high-performance NVIDIA T4 and NVIDIA V100 GPUs&lt;/li>
&lt;li>AWS Inferentia: A custom designed machine learning inference chip by AWS&lt;/li>
&lt;li>Amazon Elastic Inference (EI): An accelerator that saves cost by giving you access to variable-size GPU acceleration, for models that don’t need a dedicated GPU&lt;/li>
&lt;/ol>
&lt;div class="td-card card mb-4">
&lt;div class="card-body">
&lt;h5 class="card-title">
Read the full blog post here: &lt;br>&lt;br> &lt;i class='fa-brands fa-medium'>&lt;/i> &lt;a href="https://medium.com/towards-data-science/a-complete-guide-to-ai-accelerators-for-deep-learning-inference-gpus-aws-inferentia-and-amazon-7a5d6804ef1c">A complete guide to AI accelerators for deep learning inference — GPUs, AWS Inferentia and Amazon Elastic Inference&lt;/a>
&lt;/h5>
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;div class="card-footer">
&lt;img src="featured.png" alt="">
&lt;/div>
&lt;/div></description></item><item><title>Blog: Choosing the right GPU for deep learning on AWS</title><link>http://localhost:1313/choosing-the-right-gpu-for-deep-learning-on-aws/</link><pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate><guid>http://localhost:1313/choosing-the-right-gpu-for-deep-learning-on-aws/</guid><description>
&lt;img src="http://localhost:1313/choosing-the-right-gpu-for-deep-learning-on-aws/featured_hu3cf755c2b3f91847dc184a8c7feac088_100672_640x0_resize_catmullrom_3.png" width="640" height="453"/>
&lt;p>On AWS, you can launch GPU instances with different GPU memory sizes (8 GB, 16 GB, 24 GB, 32 GB, 40 GB), NVIDIA GPU generations (Ampere, Turing, Volta, Maxwell, Kepler) different capabilities (FP64, FP32, FP16, INT8, Sparsity, TensorCores, NVLink), different number of GPUs per instance (1, 2, 4, 8, 16), and paired with different CPUs (Intel, AMD, Graviton2). You can also select instances with different vCPUs (core thread count), system memory and network bandwidth and add a range of storage options (object storage, network file systems, block storage, etc.) — in summary, you have options.&lt;/p>
&lt;p>My goal with this blog post is to provide you with guidance on how you can choose the right GPU instance on AWS for your deep learning projects. I’ll discuss key features and benefits of various EC2 GPU instances, and workloads that are best suited for each instance type and size. If you’re new to AWS, or new to GPUs, or new to deep learning, my hope is that you’ll find the information you need to make the right choice for your projects.&lt;/p>
&lt;h4 id="topics-covered-in-this-blog-post">Topics covered in this blog post:&lt;/h4>
&lt;ol>
&lt;li>Key recommendations for the busy data scientist/ML practitioner&lt;/li>
&lt;li>Why you should choose the right GPU instance not just the right GPU&lt;/li>
&lt;li>Deep dive on GPU instance types: P4, P3, G5 (G5g), G4, P2 and G3&lt;/li>
&lt;li>Other machine learning accelerators and instances on AWS&lt;/li>
&lt;li>Cost optimization tips when using GPU instances for ML&lt;/li>
&lt;li>What software and frameworks to use on AWS?&lt;/li>
&lt;li>Which GPUs to consider for HPC use-cases?&lt;/li>
&lt;li>A complete and unapologetically detailed spreadsheet of all AWS GPU instances and their features&lt;/li>
&lt;/ol>
&lt;div class="td-card card mb-4">
&lt;div class="card-body">
&lt;h5 class="card-title">
Read the full blog post here: &lt;br>&lt;br> &lt;i class='fa-brands fa-medium'>&lt;/i> &lt;a href="https://medium.com/towards-data-science/choosing-the-right-gpu-for-deep-learning-on-aws-d69c157d8c86">Choosing the right GPU for deep learning on AWS&lt;/a>
&lt;/h5>
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;div class="card-footer">
&lt;img src="featured.png" alt="">
&lt;/div>
&lt;/div></description></item></channel></rss>