[{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/","tags":"","title":"Blog"},{"body":"Here are few of my popular blogposts. Read these and more on my medium blog: https://medium.com/@shashankprasanna How Pytorch 2.0 Accelerates Deep Learning with Operator Fusion and CPU/GPU Code-Generation Choosing the right GPU for deep learning on AWS AI Accelerators and Machine Learning Algorithms: Co-Design and Evolution How Docker Runs Machine Learning on NVIDIA GPUs, AWS Inferentia, and Other Hardware AI Accelerators A complete guide to AI accelerators for deep learning inference ‚Äî GPUs, AWS Inferentia and Amazon Elastic Inference Benchmarking Modular Mojoüî• and PyTorch torch.compile() on Mandelbrot function ","categories":"","description":"","excerpt":"Here are few of my popular blogposts. Read these and more on my medium ‚Ä¶","ref":"/popular_blog_posts/","tags":"","title":"Popular blog posts"},{"body":"Here are 5 GPU instance recommendations on AWS that should serve majority of deep learning use-cases. For a complete deep dive into choosing the right GPU for deep learning on AWS, read my blog post:\nChoosing the right GPU for deep learning on AWS Highest performing multi-GPU instance on AWS Instance: p4d.24xlarge\nWhen to use it: When you need all the performance you can get. Use it for distributed training on large models and datasets.\nWhat you get: 8 x NVIDIA A100 GPUs with 40 GB GPU memory per GPU. Based on the latest NVIDIA Ampere architecture. Includes 3rd generation NVLink for fast multi-GPU training.\nHighest performing single-GPU instance on AWS Instance: p3.2xlarge\nWhen to use it: When you want the highest performance Single GPU and you‚Äôre fine with 16 GB of GPU memory.\nWhat you get: 1 x NVIDIA V100 GPU with 16 GB of GPU memory. Based on the older NVIDIA Volta architecture. The best performing single-GPU is still the NVIDIA A100 on P4 instance, but you can only get 8 x NVIDIA A100 GPUs on P4. This GPU has a slight performance edge over NVIDIA A10G on G5 instance discussed next, but G5 is far more cost-effective and has more GPU memory.\nBest performance/cost, single-GPU instance on AWS Instance: g5.xlarge\nWhen to use it: When you want high-performance, more GPU memory at lower cost than P3 instance\nWhat you get: 1 x NVIDIA A10G GPU with 24 GB of GPU memory, based on the latest Ampere architecture. NVIDIA A10G can be seen as a lower powered cousin of the A100 on the p4d.24xlarge so it‚Äôs easy to migrate and scale when you need more compute. Consider larger sizes withg5.(2/4/8/16)xlarge for the same single-GPU with more vCPUs and higher system memory if you have more pre or post processing steps.\nBest performance/cost, multi-GPU instance on AWS Instance: p3.(8/16)xlarge\nWhen to use it: Cost-effective multi-GPU model development and training.\nWhat you get: p3.8xlarge has 4 x NVIDIA V100 GPUs and p3.16xlarge has 8 x NVIDIA V100 GPUs with 16 GB of GPU memory on each GPU, based on the older NVIDIA Volta architecture. For larger models, datasets and faster performance consider P4 instances.\nHigh-performance GPU instance at a budget on AWS Instance: g4dn.xlarge\nWhen to use it: Lower performance than other options at lower cost for model development and training. Cost effective model inference deployment.\nWhat you get: 1 x NVIDIA T4 GPU with 16 GB of GPU memory. Based on the previous generation NVIDIA Turing architecture. Consider g4dn.(2/4/8/16)xlarge for more vCPUs and higher system memory if you have more pre or post processing.\nRelated blog posts AI Accelerators and Machine Learning Algorithms: Co-Design and Evolution Choosing the right GPU for deep learning on AWS How Docker Runs Machine Learning on NVIDIA GPUs, AWS Inferentia, and Other Hardware AI Accelerators ","categories":"","description":"In a hurry? Here are the best GPUs for Deep Learining on AWS","excerpt":"In a hurry? Here are the best GPUs for Deep Learining on AWS","ref":"/best-gpus-on-aws-for-deep-learning/","tags":"","title":"Best GPUs on AWS for Deep Learning"},{"body":"\nAn AI accelerator is a dedicated processor designed to accelerate machine learning computations. Machine learning, and particularly its subset, deep learning is primarily composed of a large number of linear algebra computations, (i.e. matrix-matrix, matrix-vector operations) and these operations can be easily parallelized. AI accelerators are specialized hardware designed to accelerate these basic machine learning computations and improve performance, reduce latency and reduce cost of deploying machine learning based applications.\nWhy do we need specialized AI accelerators? The two most important reasons for building dedicated processors for machine learning are:\nEnergy efficiency Faster performance Recent trends to improve model accuracy, have been to introduce larger models with more parameters and train them on larger data sets. As model sizes get larger, and current processors won‚Äôt be able to deliver the processing power needed to train or run inference on these models under tight time-to-train and inference latency requirements.\nGeneral purpose processors like CPUs trade-off energy efficiency for versatility and special purpose processors (AI accelerators) trade off versatility for energy efficiency. AI accelerators on the other hand can be designed with features to minimize memory access, offer larger on-chip cache and include dedicated hardware features to accelerate matrix-matrix computations. Since AI accelerators are purpose built devices it is ‚Äúaware‚Äù of the algorithms that it runs on and its dedicated features will run it more efficiently than a general purpose processor.\nList of popular AI accelerators for training\nNVIDIA GPUs: Available on AWS, GCP, Azure and at your local computer store (See my recommendation list on the left menu) AWS Tranium: Available on AWS Intel Habana Gaudi: Available on AWS (v1) and Intel DevCloud (v1 and v2) Google Cloud TPUs: Available on GCP and via Colab (v1-v4) List of popular AI accelerators for inference\nNVIDIA GPUs: Available on AWS, GCP, Azure (See my recommendation list on the left menu) AWS Inferentia: Available on AWS (See my recommend blog post below) Intel Habana Gaudi: Available on AWS and Intel DevCloud (v1 and v2) Google Cloud TPUs: Available on GCP and via Colab (v1-v4) Note: Modern GPUs have dedicated silicon (TensorCores) and precision types (TF32, BF16) designed for deep learning bringing them closer to dedicated AI accelerators vs. general purpose parallel processors Recommended blog posts AI Accelerators and Machine Learning Algorithms: Co-Design and Evolution A complete guide to AI accelerators for deep learning inference ‚Äî GPUs, AWS Inferentia and Amazon Elastic Inference ","categories":"","description":"An AI accelerator is a dedicated processor designed to accelerate machine learning computations.","excerpt":"An AI accelerator is a dedicated processor designed to accelerate ‚Ä¶","ref":"/what-is-an-ai-accelerator/","tags":"","title":"What is an AI accelerator?"},{"body":"","categories":"","description":"","excerpt":"","ref":"/quick-guides/","tags":"","title":"üìö Quick guides"},{"body":"Here is a complete list of all Amazon EC2 GPU instance types on AWS that I‚Äôve painstakenly compiled, because you can‚Äôt find this information anywhere on AWS. In the tabular format below, you‚Äôll find more detailed information about GPU type, interconnect, Thermal design power (TDP), precision types supported etc.\nFrom my blog post: Choosing the right GPU for deep learning on AWS Tabular format With more information than you were probably looking for üòä\nArchitecture NVIDIA GPU Instance type Instance name Number of GPUs GPU Memory (per GPU) GPU Interconnect (NVLink / PCIe) Thermal\nDesign Power (TDP) from nvidia-smi Tensor Cores (mixed-precision) Precision Support CPU Type Nitro based Ampere A100 P4 p4d.24xlarge 8 40 GB NVLink gen 3 (600 GB/s) 400W Tensor Cores (Gen 3) FP64, FP32, FP16, INT8, BF16, TF32 Intel Xeon Scalable (Cascade Lake) Yes Ampere A10G G5 g5.xlarge 1 24 GB NA (single GPU) 300W Tensor Cores (Gen 3) FP64, FP32, FP16, INT8, BF16, TF32 AMD EPYC Yes Ampere A10G G5 g5.2xlarge 1 24 GB NA (single GPU) 300W Tensor Cores (Gen 3) FP64, FP32, FP16, INT8, BF16, TF32 AMD EPYC Yes Ampere A10G G5 g5.4xlarge 1 24 GB NA (single GPU) 300W Tensor Cores (Gen 3) FP64, FP32, FP16, INT8, BF16, TF32 AMD EPYC Yes Ampere A10G G5 g5.8xlarge 1 24 GB NA (single GPU) 300W Tensor Cores (Gen 3) FP64, FP32, FP16, INT8, BF16, TF32 AMD EPYC Yes Ampere A10G G5 g5.16xlarge 1 24 GB NA (single GPU) 300W Tensor Cores (Gen 3) FP64, FP32, FP16, INT8, BF16, TF32 AMD EPYC Yes Ampere A10G G5 g5.12xlarge 4 24 GB PCIe 300W Tensor Cores (Gen 3) FP64, FP32, FP16, INT8, BF16, TF32 AMD EPYC Yes Ampere A10G G5 g5.24xlarge 4 24 GB PCIe 300W Tensor Cores (Gen 3) FP64, FP32, FP16, INT8, BF16, TF32 AMD EPYC Yes Ampere A10G G5 g5.48xlarge 8 24 GB PCIe 300W Tensor Cores (Gen 3) FP64, FP32, FP16, INT8, BF16, TF32 AMD EPYC Yes Turing T4G G5 g5g.xlarge 1 16 GB NA (single GPU) 70W Tensor Cores (Gen 2) FP32, FP16, INT8 AWS Graviton2 Yes Turing T4G G5 g5g.2xlarge 1 16 GB NA (single GPU) 70W Tensor Cores (Gen 2) FP32, FP16, INT8 AWS Graviton2 Yes Turing T4G G5 g5g.4xlarge 1 16 GB NA (single GPU) 70W Tensor Cores (Gen 2) FP32, FP16, INT8 AWS Graviton2 Yes Turing T4G G5 g5g.8xlarge 1 16 GB NA (single GPU) 70W Tensor Cores (Gen 2) FP32, FP16, INT8 AWS Graviton2 Yes Turing T4G G5 g5g.16xlarge 2 16 GB PCIe 70W Tensor Cores (Gen 2) FP32, FP16, INT8 AWS Graviton2 Yes Turing T4G G5 g5g.metal 2 16 GB PCIe 70W Tensor Cores (Gen 2) FP32, FP16, INT8 AWS Graviton2 Yes Turing T4 G4 g4dn.xlarge 1 16 GB NA (single GPU) 70W Tensor Cores (Gen 2) FP32, FP16, INT8 Intel Xeon Scalable (Cascade Lake) Yes Turing T4 G4 g4dn.2xlarge 1 16 GB NA (single GPU) 70W Tensor Cores (Gen 2) FP32, FP16, INT8 Intel Xeon Scalable (Cascade Lake) Yes Turing T4 G4 g4dn.4xlarge 1 16 GB NA (single GPU) 70W Tensor Cores (Gen 2) FP32, FP16, INT8 Intel Xeon Scalable (Cascade Lake) Yes Turing T4 G4 g4dn.8xlarge 1 16 GB NA (single GPU) 70W Tensor Cores (Gen 2) FP32, FP16, INT8 Intel Xeon Scalable (Cascade Lake) Yes Turing T4 G4 g4dn.16xlarge 1 16 GB NA (single GPU) 70W Tensor Cores (Gen 2) FP32, FP16, INT8 Intel Xeon Scalable (Cascade Lake) Yes Turing T4 G4 g4dn.12xlarge 4 16 GB PCIe 70W Tensor Cores (Gen 2) FP32, FP16, INT8 Intel Xeon Scalable (Cascade Lake) Yes Turing T4 G4 g4dn.metal 8 16 GB PCIe 70W Tensor Cores (Gen 2) FP32, FP16, INT8 Intel Xeon Scalable (Cascade Lake) Yes Volta V100 P3 p3.2xlarge 1 16 GB NA (single GPU) 300W Tensor Cores (Gen 1) FP64, FP32, FP16 Intel Xeon (Broadwell) No Volta V100 P3 p3.8xlarge 4 16 GB NVLink gen 2 (300 GB/s) 300W Tensor Cores (Gen 1) FP64, FP32, FP16 Intel Xeon (Broadwell) No Volta V100 P3 p3.16xlarge 8 16 GB NVLink gen 2 (300 GB/s) 300W Tensor Cores (Gen 1) FP64, FP32, FP16 Intel Xeon (Broadwell) No Volta V100* P3 p3dn.24xlarge 8 32 GB NVLink gen 2 (300 GB/s) 300W Tensor Cores (Gen 1) FP64, FP32, FP16 Intel Xeon (Skylake) Yes Kepler K80 P2 p2.xlarge 1 12 GB NA (single GPU) 149W No FP64, FP32 Intel Xeon (Broadwell) No Kepler K80 P2 p2.8xlarge 8 12 GB PCIe 149W No FP64, FP32 Intel Xeon (Broadwell) No Kepler K80 P2 p2.16xlarge 16 12 GB PCIe 149W No FP64, FP32 Intel Xeon (Broadwell) No Maxwell M60 G3 g3s.xlarge 1 8 GB PCIe 150W No FP32 Intel Xeon (Broadwell) No Maxwell M60 G3 g3.4xlarge 1 8 GB PCIe 150W No FP32 Intel Xeon (Broadwell) No Maxwell M60 G3 g3.8xlarge 2 8 GB PCIe 150W No FP32 Intel Xeon (Broadwell) No Maxwell M60 G3 g3.16xlarge 4 8 GB PCIe 150W No FP32 Intel Xeon (Broadwell) No ","categories":"","description":"A complete list of all Amazon EC2 GPU instance types on AWS that I've painstakenly compiled, because you can't find this information anywhere in AWS docs","excerpt":"A complete list of all Amazon EC2 GPU instance types on AWS that I've ‚Ä¶","ref":"/complete-list-of-all-aws-gpu-instances/","tags":"","title":"AWS GPU instances complete list"},{"body":" Reach out if you‚Äôd like an instructor led hands-on workshop ‚ö°Ô∏è More coming soon! ‚ö°Ô∏è üõ†Ô∏è Workshop: A Tour of PyTorch 2.0 Learn about PyTorch 2.0 with a deep dive into the technology stack that powers the new torch.compile() API: TorchDynamo, AITAutograd, PrimTorch and TorchInductor. The new compiler stack reduces training times across a wide range of workloads while being fully backwards compatible. Bring your laptops, or connect to remote GPU powered systems to run the examples. üõ†Ô∏è Workshop: PyTorch Distributed Training on AWS Learn how to efficiently scale your training workloads to multiple instances with Amazon SageMaker. SageMaker manages your compute, storage and networking infrastructure, simply bring in your PyTorch code and learn how to distribute training across large number of CPUs and GPUs. Relevant blog posts AI Accelerators and Machine Learning Algorithms: Co-Design and Evolution Choosing the right GPU for deep learning on AWS How Docker Runs Machine Learning on NVIDIA GPUs, AWS Inferentia, and Other Hardware AI Accelerators A complete guide to AI accelerators for deep learning inference ‚Äî GPUs, AWS Inferentia and Amazon Elastic Inference ","categories":"","description":"","excerpt":" Reach out if you‚Äôd like an instructor led hands-on workshop ‚ö°Ô∏è More ‚Ä¶","ref":"/workshops/","tags":"","title":"Hosted Workshops"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/ai/","tags":"","title":"AI"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/career/","tags":"","title":"career"},{"body":" üî•Updates I‚Äôve joined Modular AI as a Developer Advocate! Read more about why in my blog post: https://shashankprasanna.com/why-i-joined-modular-ai/ Shashank Prasanna Hi! üëãüèΩ I‚Äôm a multi-disciplinary engineer, technology communicator and doodler. I ‚ù§Ô∏è to üó£Ô∏è about machine learning, specialized machine learning hardware (AI Accelerators), high-performance computing (HPC) and AI in the cloud. I‚Äôm passionate about Math, statistics, linear algebra, numerical optimization, control theory, non-linear dynamical systems (and chaos), and astronomy. üë®üèΩ‚Äçüíª Work I‚Äôm a developer advocate at Modular AI. I‚Äôve previously worked at Meta, Amazon Web Services (AWS), MathWorks (MATLAB \u0026 Simulink), NVIDIA and Oracle in various roles including software development and product marketing. I find most joy in education and I put a lot of my energy in content creation and story telling.\nNot Work: I‚Äôm a passionate recreational runner üèÉ‚Äç‚ôÇÔ∏è, running shoe geek üëü and a coffee connoisseur ‚òïÔ∏è.\nüéì Education I‚Äôm an Electrical Engineering by training, with a specialization in Control Theory and Non-linear Dynamics. My graduate research was advised by Dr. Leon Iasemidis.\nIn my graduate thesis Directional Information Flow and Applications I discussed the application of transfer entropy (a model-free, information theoretic measure) to the detection of epileptogenic focus in the brain (origin of epileptic seizures).\n","categories":"","description":"","excerpt":" üî•Updates I‚Äôve joined Modular AI as a Developer Advocate! Read more ‚Ä¶","ref":"/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/modular/","tags":"","title":"modular"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/mojo/","tags":"","title":"mojo"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":" In the past decade, I‚Äôve had the very good fortune of working for companies that make some of the best and proven developer productivity tools. If you‚Äôre an engineer who‚Äôs built control systems for rockets, cars or robots you‚Äôve used MATLAB and Simulink. If you‚Äôre an AI developer you likely have an NVIDIA GPU at arm‚Äôs reach (ssh to AWS EC2 counts as arm‚Äôs reach). If you‚Äôre a developer running software in production you‚Äôve likely relied on AWS services for their scalability and and reliability for deployment. If you‚Äôre an AI researcher there is no better tool than PyTorch to go from research paper to trained model.\nWhat these tools have in common is that they are individually, in my personal opinion, UNPARALLELED at what they do. However, when you start stringing multiple of these tools together, then their productivity promise breaks down. You already know this if you‚Äôre training custom models using some or all of these tools. I‚Äôve spend the last several years talking about the the role of AI software and specialized AI hardware and the challenges with using multiple frameworks and AI accelerators during development and deployment and you can read about them in my blog posts.\nIf you start AI development today, you‚Äôll need answers to these questions before you start your project since it has huge implication on what tools you will use:\nDuring prototyping and development Should you decide on the framework ahead of time (PyTorch, TensorFlow,?) Should you decide where you‚Äôre going to run it later (GPU, TPU, Intel Habana, AWS Silicon etc.)? Should you write 5 versions of custom layer Op for each potential AI accelerators you want to target? Will your code run as-is when you go from laptop to cloud? on x86 and ARM CPUs? what about GPUs? What about other AI accelerators (AWS Silicon, Intel Habana Gaudi)? Will your code scale out of the box? will it scale on non-GPU AI accelerators? Will it work on all network hardware? between accelerators? between nodes? If you want to write non-ML code (e.g. data processing, control algorithm etc.) will that accelerate on CPUs, GPUs, AI Accelerators? What language do you write it in? During production deployment What serving framework will you use, was it designed for production or for AI research and prototyping Will it support multiple framework model formats? Does it run on x86, ARM, AI accelerators for inference? Can it run on embedded devices, what architectures are supported? Can it do model parallel on different AI accelerators? Can you meet your target throughput for desired latency at lower cost? Can you monitor performance and accuracy metrics? It‚Äôs exhausting isn‚Äôt it?\nThe disadvantage of using disparate systems is that you risk months or years of reworking, re-tooling and re-implementing when something very small changes, such as - deciding to run on different hardware: GPUs and another AI accelerators, or implement custom models for multiple different frameworks or languages.\nUnfortunately, there aren‚Äôt a great solutions for these challenges today. What we need a very small, tight set of tools, that is performant, reliable that works well together, runs everywhere and is modular. You see where I‚Äôm going with this.\nEnter Modular AI And that brings me to why I decided to join Modular. I share Modular co-founders Chris Lattner (LLVM, Swift) and Tim Davis‚Äôs vision that AI tools are broken today and can be better and when fixed, can infinitely improve developer productivity. AI tools can be more usable. AI tools can be more accessible. AI tools can make developers more productive which will make AI itself more accessible to everyone in the world. There will be a future when you don‚Äôt have to have answers to the questions ahead of time. You start your work, introduce different hardware, introduce custom models and extensions and stuff will just work. On any system. Deployed anywhere. And you only use one language. And deploy with one runtime engine.\nIf I‚Äôve piqued your interest, come check out the products we‚Äôre building at Modular AI:\nMojoüî• programming language that combines the usability of Python with the performance of C. You can write your custom kernels and ops in Mojo, so your entire stack that‚Äôll run on multiple AI accelerators is in one language which is a superset of Python! Modular Engine is an AI inference engine built with Mojoüî• that gives you unparalleled performance and runs PyTorch and TensorFlow models on multiple hardware. Good tools make us productive, they bring us joy, the same joy you get when you find the right screw driver for that pesky loose screw, the right sized wrench, the right drill - no other makeshift tool will bring you that satisfaction of the right tool for the job. Practitioners in every domain need tools to build, create, solve, and implement more efficiently and AI is no different. We need better AI tools for developers and I believe Modular will play a significant role in building them.\nWe‚Äôre in early days, and Mojo and Modular Engine are not generally available yet, but you can try Mojo in the Mojo playground and see the performance speedups for yourself. Signup here to get access to Mojo playground and learn more about other Modular products. Follow me on Twitter @shshnkp, read my blog posts on Medium (and here) @shashank.prasanna and connect with me on LinkedIn as I‚Äôll be sharing a Modular‚Äôs journey and educational content. Thanks for reading!\n","categories":"","description":"Towards a better development tools for AI","excerpt":"Towards a better development tools for AI","ref":"/why-i-joined-modular-ai/","tags":["Modular","mojo","AI","career"],"title":"Why I joined Modular AI?"},{"body":"Last week, Modular - an startup co-founded by Chris Lattner (of LLVM, Swift, MLIR fame), announced a brand new high-performance language called Mojoüî•. Mojoüî• looks and reads like Python but that‚Äôs only on the surface, underneath the familiar Python syntax Mojo uses it‚Äôs own JIT and AOT compilation process to accelerate Python code. Although Mojo doesn‚Äôt fully support all of Python today, according to Mojo docs, over time Mojo is expected to become a superset of Python. PyTorch's got some Mojoüî• Mojo isn‚Äôt open-source yet and can only be accessed from the Mojo playground. So I promptly applied and got access to Mojo Playground a couple of days after the accouncement on May 3rd. First thing I wanted to do was to compare Mojo‚Äôs performance to PyTorch. While PyTorch is a popular framework for deep learning, its also a capable replacement for numpy as a high-performance scientific computing library.\nAnd my favorite feature of PyTorch is the new torch.compile() API introduced in PyTorch 2.0 that can accelerate arbitrary functions (with limitations) written using the PyTorch API. It takes PyTorch highlevel API, optimizes it and generates C++ or GPU code to improve it‚Äôs performance. I‚Äôve discussed torch.compile() in great detail in my blog post, and I highly recommend reading it if you want to learn about how PyTorch compiler does operator fusion and CPU/GPU code-generation:\nHow Pytorch 2.0 Accelerates Deep Learning with Operator Fusion and CPU/GPU Code-Generation In this blog post I want to discuss relative performance between Mojoüî• and PyTorch, and I picked the Mandelbrot example that Jeremy Howard (or FastAI fame) demoed during the Modular keynote. I reimplemnted Mojo‚Äôs Mandelbrot example in PyTorch to compared it‚Äôs performance with Mojo. Before I get into the code, here are the results.\nSummary: Mojo is fast! and PyTorch is no slouch either!\nLanguage/Framework Mandelbrot execution\n(200 iterations) System PyTorch GPU torch.compile() ~165 Œºs (micro seconds) Intel Core i7-9700K CPU @ 3.60GHz + NVIDIA Titan V Mojo CPU ~2.6 ms Mojo Playground: Intel Xeon Platinum 8375C CPU @ 2.90GHz PyTorch CPU torch.compile() ~9 ms Intel Core i7-9700K CPU @ 3.60GHz PyTorch GPU ~15 ms Intel Core i7-9700K CPU @ 3.60GHz + NVIDIA Titan V PyTorch CPU ~50 ms Intel Core i7-9700K CPU @ 3.60GHz PyTorch Apple M2 MPS ~70 ms Macbook Pro M2 Apple Silicon + 30-Core GPU + 16-Core Neural Engine Python/numpy ~152 ms Intel Core i7-9700K CPU @ 3.60GHz Interesting observations Mojo is the fastest CPU implementation PyTorch GPU with torch.compile() generates a fused cuda kernel making it the fastest on GPU PyTorch CPU with torch.compile() which generates fused C++ code is still faster than PyTorch GPU without compilation It should come as no surprise that PyTorch generated custom fused kernel for Mandelbrot function running on GPU is indeed faster than Mojo CPU, it‚Äôs not even a fair comparision. PyTorch CPU is only slightly slower, but makes up for performance with better usability. Mojo is harder to use and I‚Äôm positive the UX will improve over time.\nBenchmarks and caveats This is not a scientific benchmark test. This is a rather crude, and hacked-together-in-a-day example that should illustrate the performance differences and coding approaches, so take it with a grain of Sodium Chloride.\nMy naive testing methodology: I use Jupyter‚Äôs native timeit with 10 repeats to benchmark and report mean and variance. For GPU, I call torch.cuda.synchronize() before measurement to ensure that the kernel is fully executed. This code example also benchmarks tensors/arrays creation which is in the body of the function, which migh not be a feature that arises in real-world scenarios. I don‚Äôt measure the compilation time for PyTorch 2.0 and that does take a lot of time to generate loop-unrolled C++ code for CPU and NVPTX for GPU. Hardware differences Mojo is not open-source (yet), and the only way to run it is on the early access Mojo Playground which has a different configuration compared to my desktop running PyTorch. For the Apple M2 benchmark I also use a MacBook Pro laptop for M2 testing. Suffice to say, this is not a fair comparison. Hardware details:\nPyTorch on Desktop CPU: Intel Core i7-9700K CPU @ 3.60GHz with 8 cores GPU: NVIDIA Titan V PyTorch on Mac Apple MacBook Pro with M2 Apple Silicon Mojoüî• on Mojo Playground Intel Xeon Platinum 8375C CPU @ 2.90GHz with 32 cores Update (05/09/23): Chris Lattner pointed out that Mojo doesn‚Äôt use all 32 cores on the Mojo Playground. That is mindblowing performance on 4 cores! ü§Ø Why is PyTorch so much faster than Python/Numpy on CPU? PyTorch is faster than Python/Numpy because the higher level PyTorch API calls highly optimized C++ routines implemented in the ATen library. These routines are eagerly evaluated, which means that each PyTorch API call is executed immediately which adds some function call overhead with every API call. To address this, PyTorch 2.0 introduced a compilation API called torch.compile() which takes eager PyTorch code, optimizes it and generates C++ code with OpenMP pragmas for parallelization on CPU or generates GPU code using OpenAI Triton. This is similar to what Numba does for Python code, but PyTorch 2.0‚Äôs torch.compile() is much more powerful because it can fuse multiple PyTorch API calls into a single kernel, which reduces function call overhead and improves performance.\nI‚Äôve discussed this in detail in my PyTorch 2.0 blog post, but here is a screenshot of what the automatically generated fused kernels for C++ for CPU and OpenAI Triton for GPU look like for Mandelbrot function\nHow Pytorch 2.0 Accelerates Deep Learning with Operator Fusion and CPU/GPU Code-Generation Autogenerated C++ code for Mandelbrot function with torch.compile() Click to zoom Autogenerated OpenAI Triton code for Mandelbrot function with torch.compile() Click to zoom Baseline: Benchmarking Python/Numpy Let‚Äôs start with a baseline. Here‚Äôs the Python/Numpy implementation of Mandelbrot function. I‚Äôve also included a function to plot the Mandelbrot set using matplotlib. We‚Äôll later modify this function to use PyTorch.\nimport numpy as np import torch import matplotlib.pyplot as plt import matplotlib.colors as colors import time import warnings def mandelbrot_numpy(max_iter=200): # Define the boundaries of the complex plane xn = 450 yn = 375 xmin = -2.25 xmax = 0.75 ymin = -1.25 ymax = 1.25 # Create the grid of complex numbers x_values = np.linspace(xmin, xmax, xn, dtype=np.float64) y_values = np.linspace(ymin, ymax, yn, dtype=np.float64) rx, iy = np.meshgrid(x_values, y_values, indexing='xy') x = rx.copy() y = iy.copy() mask = np.zeros_like(x) for i in range(max_iter): x_prev = x y_prev = y x = x_prev**2 - y_prev**2 + rx y = 2*x_prev*y_prev + iy inside = np.sqrt(x**2 + y**2) \u003c= 2 mask+=inside return mask def make_plot_python(m): xn = 450 yn = 375 dpi = 32 width = 5 height = 5 * yn // xn fig = plt.figure(1, [width, height], dpi=dpi) ax = fig.add_axes([0.0, 0.0, 1.0, 1.0], frame_on=False, aspect=1) light = colors.LightSource(315, 10, 0, 1, 1, 0) image = light.shade(m, plt.cm.hot, colors.PowerNorm(0.3), blend_mode='hsv', vert_exag=1.5) plt.imshow(image) plt.axis(\"off\") plt.show() Output: With a baseline established let‚Äôs compare the performance of PyTorch and Mojo. Benchmarking Mojo on the Mojo playground This comparision is a bit unfair because Mojoüî• playground has a 32 core Xeon CPU, but I only have a modest 4 year old 8 core desktop CPU. The clock frequency, memory bandwidth and cache sizes and number of cores are all different, but I can‚Äôt install PyTorch on Mojo playground so this is the best I can do for comparision for now.\nAt the bottom of this notebook, I add these few lines of code to measure the execution time of the mandelbrot function.\nfrom Time import now let eval_begin = now() let mandelbrot_set = compute_mandelbrot_simd() let eval_end = now() let execution_time = (eval_end - eval_begin) print(\"execution_time:\") print(F64(execution_time) / 1000000) Output I found it difficult to benchmark Mojo, because Python benchmarking tools don‚Äôt work very readily. I ran the above code several times to ensure that the results are consistent. Benchmarking PyTorch CPU To update our mandelbrot function from numpy implementation to PyTorch implementation I made the following small changes\nreplace np with torch add device=device to the tensor creation calls, this allows us to pass the appropriate CPU, GPU or Apple MPS device to PyTorch. Updated mandelbrot function:\ndef mandelbrot_pytorch(device='cpu', max_iter=200): # Define the boundaries of the complex plane xn = 450 yn = 375 xmin = -2.25 xmax = 0.75 ymin = -1.25 ymax = 1.25 # Create the grid of complex numbers x_values = torch.linspace(xmin, xmax, xn, device=device) y_values = torch.linspace(ymin, ymax, yn, device=device) rx, iy = torch.meshgrid(x_values, y_values, indexing='xy') x = rx.clone() y = iy.clone() mask = torch.zeros_like(x, device=device) for i in range(max_iter): x_prev = x y_prev = y x = x_prev**2 - y_prev**2 + rx y = 2*x_prev*y_prev + iy inside = torch.sqrt(x**2 + y**2) \u003c= 2 mask+=inside return mask Now let‚Äôs call our mandelbrot_pytorch function with device='cpu' Benchmarking PyTorch CPU with torch.compile() You can compile PyTorch functions using torch.compile() and TorchInductor will optimize and generate C++ code with OpenMP pragmas for parallization. This will significantly improve the performance of the function. All of this happens under the hood when you run the code below, but you can pass an additional argument options={'trace.enabled':True} to see the generated code. I discuss this is further detail in my PyTorch 2.0 blog post: How Pytorch 2.0 Accelerates Deep Learning with Operator Fusion and CPU/GPU Code-Generation Let‚Äôs compile our mandelbrot function for CPU backend:\ndevice = 'cpu' mandelbrot_compiled = torch.compile(mandelbrot_pytorch) mandelbrot_set = mandelbrot_compiled(device) make_plot_python(mandelbrot_set.numpy()) Output The generated C++ code looks like this\nBenchmarking PyTorch GPU device = 'cuda' mandelbrot_set = mandelbrot_pytorch(device) make_plot_python(mandelbrot_set.cpu().numpy()) Output Benchmarking PyTorch GPU with torch.compile() device = 'cuda' mandelbrot_compiled = torch.compile(mandelbrot_pytorch) mandelbrot_set = mandelbrot_compiled(device) make_plot_python(mandelbrot_set.cpu().numpy()) The generated OpenAI Triton code which gets compiled to NVPTX for GPUs, looks like this\nBenchmarking PyTorch Apple M1/M2 Silicon with MPS support Conclusion That‚Äôs it folks! I hope you enjoyed this quick comparision of PyTorch and Mojoüî•. Mojo is fast, but doesn‚Äôt have the same level of usability of PyTorch, but that may just be just a matter of time and community support. PyTorch‚Äôs one-two punch combo of eager mode with high-level Tensor API and compilation with torch.compile() is a powerful combination today. However, the PyTorch ecosystem is also quite fragmented with multiple code paths for different accelerators: TorchInductor (GPUs, CPUs), XLA (TPU, AWS Tranium/Inferentia), custom bindings/bridges (Intel Habana, MPS), and some accelerators like GPUs implement all paths. This leaves the end user and hardware vendors in a dilemma.\nOne of the main benefit of Mojo that I see is the ability to write OpenAI Triton style kernel code in the Python language with fast or faster then C++ performance. This would make supporting custom ops for inference easier. We‚Äôre certainly living in an exciting times for AI Infra, AI accelerators and AI frameworks. Maybe we‚Äôre at the cusp of another LLVM moment but for AI.\nIf you enjoyed reading this, check out my other blog posts on Medium or reach out to me on social media, links are on the homepage. Cheers!\n","categories":"","description":"Quick comparision of Mandelbrot function acceleration using PyTorch 2.0's torch.compile() and Modular's Mojoüî•","excerpt":"Quick comparision of Mandelbrot function acceleration using PyTorch ‚Ä¶","ref":"/benchmarking-modular-mojo-and-pytorch-torch.compile-on-mandelbrot-function/","tags":["pytorch","modular","mojo","mandelbrot"],"title":"Benchmarking Modular Mojoüî• and PyTorch torch.compile() on Mandelbrot function"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/mandelbrot/","tags":"","title":"mandelbrot"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/pytorch/","tags":"","title":"pytorch"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/compiler/","tags":"","title":"compiler"},{"body":"Computer programming is magical. We write code in human readable languages, and as though by magic, it gets translated into electric currents through silicon transistors making them behave like switches and allowing them to implement complex logic ‚Äî just so we can enjoy cat videos on the internet. Between the programming language and hardware processors that run it, is an important piece of technology ‚Äî the compiler. A compiler‚Äôs job is to translate and simplify our human readable language code into instructions that a processor understands.\nCompilers play a very important role in deep learning to improve training and inference performance, improve energy efficiency, and target diverse AI accelerator hardware. In this blog post I‚Äôm going to discuss deep learning compiler technologies that powers PyTorch 2.0. I‚Äôll walk you through the different phases of the compilation process and discuss various underlying technologies with code examples and visualizations.\nRead the full blog post here: How Pytorch 2.0 Accelerates Deep Learning with Operator Fusion and CPU/GPU Code-Generation ","categories":"","description":"A primer on deep learning compiler technologies in PyTorch for graph capture, intermediate representations, operator fusion, and more","excerpt":"A primer on deep learning compiler technologies in PyTorch for graph ‚Ä¶","ref":"/how-pytorch-2.0-accelerates-deep-learning-with-operator-fusion-and-cpu/gpu-code-generation/","tags":["pytorch","compiler","IR"],"title":"How Pytorch 2.0 accelerates deep learning with operator fusion and CPU/GPU code-generation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/ir/","tags":"","title":"IR"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/ai-accelerators/","tags":"","title":"ai accelerators"},{"body":"If you told me a few years ago that data scientists would be using Docker containers in their day to day work, I wouldn‚Äôt have believed you. As a member of the broader machine learning (ML) community I always considered Docker, Kubernetes, Swarm (remember that?) exotic infrastructure tools for IT/Ops experts. Today it‚Äôs a different story, rarely a day goes by when I don‚Äôt use a Docker container for training or hosting a model. An attribute of machine learning development that makes it different from traditional software development is that it relies on specialized hardware such as GPUs, Habana Gaudi, AWS Inferentia to accelerate training and inference. This makes it challenging to have containerized deployments that are hardware-agnostic, which is one of the key benefits of containers. In this blog post I‚Äôll discuss how Docker and container technologies have evolved to address this challenge. We‚Äôll discuss:\nWhy Docker has become an essential tool for machine learning today and how it addresses machine learning specific challenges How Docker accesses specialized hardware resources on heterogeneous systems that have more than one type of processor (CPU + AI accelerators). How different AI accelerators extend Docker for hardware access with examples of 1/ NVIDIA GPUs and NVIDIA Container Toolkit and 2/ AWS Inferentia and Neuron SDK support for containers How to scale Docker containers on Kubernetes with hardware accelerated nodes Read the full blog post here: How Docker Runs Machine Learning on NVIDIA GPUs, AWS Inferentia, and Other Hardware AI Accelerators ","categories":"","description":"Efficient algorithms and methods in machine learning for AI accelerators ‚Äî NVIDIA GPUs, Intel Habana Gaudi and AWS Trainium and Inferentia","excerpt":"Efficient algorithms and methods in machine learning for AI ‚Ä¶","ref":"/ai-accelerators-and-machine-learning-algorithms-co-design-and-evolution/","tags":["ai accelerators","gpu"],"title":"AI Accelerators and Machine Learning Algorithms: Co-Design and Evolution"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/gpu/","tags":"","title":"gpu"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/aws/","tags":"","title":"aws"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/docker/","tags":"","title":"docker"},{"body":"If you told me a few years ago that data scientists would be using Docker containers in their day to day work, I wouldn‚Äôt have believed you. As a member of the broader machine learning (ML) community I always considered Docker, Kubernetes, Swarm (remember that?) exotic infrastructure tools for IT/Ops experts. Today it‚Äôs a different story, rarely a day goes by when I don‚Äôt use a Docker container for training or hosting a model. An attribute of machine learning development that makes it different from traditional software development is that it relies on specialized hardware such as GPUs, Habana Gaudi, AWS Inferentia to accelerate training and inference. This makes it challenging to have containerized deployments that are hardware-agnostic, which is one of the key benefits of containers. In this blog post I‚Äôll discuss how Docker and container technologies have evolved to address this challenge. We‚Äôll discuss:\nWhy Docker has become an essential tool for machine learning today and how it addresses machine learning specific challenges How Docker accesses specialized hardware resources on heterogeneous systems that have more than one type of processor (CPU + AI accelerators). How different AI accelerators extend Docker for hardware access with examples of 1/ NVIDIA GPUs and NVIDIA Container Toolkit and 2/ AWS Inferentia and Neuron SDK support for containers How to scale Docker containers on Kubernetes with hardware accelerated nodes Read the full blog post here:\nHow Docker Runs Machine Learning on NVIDIA GPUs, AWS Inferentia, and Other Hardware AI Accelerators ","categories":"","description":"Learn about how Docker simplifies access to NVIDIA GPUs, AWS Inferentia and scaling ML containers on Kubernetes","excerpt":"Learn about how Docker simplifies access to NVIDIA GPUs, AWS ‚Ä¶","ref":"/how-docker-runs-machine-learning-on-nvidia-gpus-aws-inferentia-and-other-hardware-ai-accelerators/","tags":["docker","gpu","aws"],"title":"How Docker Runs Machine Learning on NVIDIA GPUs, AWS Inferentia, and Other Hardware AI Accelerators"},{"body":"We‚Äôve all dealt with the frustration of poor or incomplete documentation in software projects. In their 2021 state of the Octoverse survey, GitHub found that easy to use documentation, boosted developer productivity by 50% and improved contribution quality, yet it continues to be an under-invested area across open-source projects.\nUsing OpenAI Codex you can use to automatically edit existing code to add documentation using only natural language instructions. This new feature will let you spend more time developing new features and reviewing generated documentation instead of writing documentation from scratch. In addition to generating documentation, Codex‚Äôs edit feature can refactor code, update logic, translate between programming languages and change coding styles.\nIn this blog post, we‚Äôll take a look at how Codex edit feature works through a code example. One of my favorite areas of machine learning (ML) research is automated machine learning (AutoML) or low-code ML. I‚Äôll use Codex to implement a simple data science workflow only using natural language instructions and without writing any ML code. We‚Äôll perform the following steps only using Codex‚Äôs Edit API and discuss its features as we implement the code example:\nGenerate python code to load a dataset and visualize it\nGenerate python code to train a machine learning classifier on the dataset\nEdit generated code to customize it for the specific problem dataset\nEdit updated code to add detailed documentation\nSounds exciting? Let‚Äôs get started!\nUsing OpenAI Codex edit feature to generate fully documented code to train a classifier on a tabular dataset Let‚Äôs use OpenAI Codex to solve the Titanic - Machine Learning from Disaster Kaggle competition. The titanic dataset consists of passenger information like name, age, gender, etc. and if they survived the disaster or not. We‚Äôll use natural language prompts to iteratively build code and documentation. To download the dataset, you‚Äôll need to create a free Kaggle account and download it either via the web page or by following the instructions on the Kaggle API GitHub page.\nNext, you‚Äôll need an Open AI account. If you‚Äôre new to OpenAI, head over to https://openai.com/api/login/ and create your free trial account. This will give you access to $18 in free credit that you can use for upto 3 months.\nAfter you‚Äôve created your account, you‚Äôll have access to your unique API keys that you can use to invoke the OpenAI API using the official Python, Node.js or any of the community supported libraries. Since our example generates Python code, we‚Äôll use the Python bindings.\nStep 1: Setting up OpenAI Python package Open your favorite IDE to get started, I prefer Jupyter Lab as it‚Äôs the most popular IDE used by data scientists. Import openai Python package and specify your organization and API keys. You can find these on your Open AI account.\nimport os import openai openai.organization = \"org-XXXXXXXXXXXXXXX\" openai.api_key = \"sk-XXXXXXXXXXXXXXXX\" Step 2: Generate python code to load an analyze the dataset We can use the Codex edit feature to edit existing code or generate new code. Let‚Äôs start by generating some fresh code to load our Titanic CSV dataset and analyze it.\nHere‚Äôs what the arguments to the create() function mean:\nInput: Provide a prompt as a starting point. We leave it empty since we‚Äôre going to generate new code and not edit existing code.\nInstructions: Provide instructions to Codex on what code to generate. Here we describe that we want to generate code to load and analyze our CSV dataset.\nEngine: Provide the engine for Codex edit feature, the latest name and version is Code-davinci-edit-001\nTemperature and top_p: used to control how deterministic the model is in generating a response. I choose a lower value for top_p (=0.2) to get a consistent response.\nYou can find more information about the API in the Edits documentation.\nfrom IPython.display import display input_prompt = ''' ''' instruction = ''' Write python function to load a CSV file called titanic.csv into a dataframe and use display function''' response = openai.Edit.create(input=input_prompt, instruction=instruction, engine=\"code-davinci-edit-001\", temperature=1, top_p=0.2) Output:\nWhen you run the code, you should see an output that looks like the screenshot below. From the output we can see that the dataset has both numeric and categorical variables. This information will come in handy later when we ask Codex to edit our function. For now, let‚Äôs continue to build on this program to classify the dataset.\nStep 3: Generate a Python program to classify the dataset In this step, rather than leave the input prompt empty, let‚Äôs provide the function signature we expect so Codex can fill out the rest of the program. Under instructions we provide:\n‚ÄúWrite python function to load a CSV file and perform binary XGBoost classification on a target column: Extending our previous example, we‚Äôll ask Codex to generate a program to use XGBoost to classify our dataset based on a specified target variable. If you‚Äôre new to machine learning, XGBoost is a fantastic works-out-of-the-box classifier for tabular datasets that often requires little to no fine tuning to get acceptable results.\ninput_prompt = ''' def csv_classification(csv_file, target_column): ''' instruction = ''' Write python function to load a CSV file and perform binary XGBoost classification on a target column''' response = openai.Edit.create(input=input_prompt, instruction=instruction, engine=\"code-davinci-edit-001\", temperature=1, top_p=0.2) generated_code = response[\"choices\"][0][\"text\"] print(generated_code) Output:\nCodex generates the following code to classify our dataset using XGBoost. If you‚Äôre new to machine learning, let‚Äôs just take a moment to appreciate how much time we saved by having Codex generate this vs. writing this from scratch. We still need to test if this code works, so let‚Äôs go ahead and do that in the next step.\nexec(generated_code) csv_classification('titanic.csv','Survived') Output:\nOh no! the generated code throws an error! Not what we want to see, but let‚Äôs take a closer look at the error message. The error message says:\nWe have categorical variables that need to be specified as categorical variables. If we go back to the output of Step 1, we can verify from that the Name, Sex, Ticket, Cabin and Embarked are indeed categorical.\nSince we have categorical variables, we need to instruct XGBoost to enable categorical support using `enable_categorical` argument.\nTo remedy this, let‚Äôs make Codex do all the hard work by simply copying the error message and including it in the instructions of the next step.\nStep 4: Fixing errors in the generated code by updating the instructions In this step, we start with the generated code from Step 3, and provide instructions to make changes specified in the error message. We provide the following instructions:\n‚ÄúUpdate code to set dataframe columns Name, Sex, Ticket, Cabin, Embarked to categorical and set DMatrix parameter 'enable_categorical' to 'True'‚Äù input_prompt = generated_code instruction = ''' Update code to set dataframe columns Name, Sex, Ticket, Cabin, Embarked to categorical and set DMatrix parameter 'enable_categorical' to 'True' ''' response = openai.Edit.create(input=input_prompt, instruction=instruction, engine=\"code-davinci-edit-001\", temperature=1, top_p=0.2) generated_code = response[\"choices\"][0][\"text\"] print(generated_code) Output:\nThis generates updated code that addresses the categorical variable errors by converting the specified column into categorical and by setting enable_categorical to True when creating the XGBoost‚Äôs native DMatrix data structure. Again let‚Äôs take a moment to appreciate how little we had to do to generate code for a generic tabular data classifier using XGBoost.\nLet‚Äôs go ahead and execute this code to train our classifier:\nexec(generated_code) csv_classification('titanic.csv','Survived') Output:\nSure enough, our code now runs without any issues and trains the classifier to 83% accuracy on the test set. Note that this is a very simple dataset, but the generated code can now be used for a number of tabular classification problems. Need to modify the code to change features? Just repeat the instructions in this step to specify what needs to be updated.\nStep 5: Generate detailed documentation Finally, let‚Äôs use the generated code and add detailed documentation to it using Codex. To do that we provide natural language instructions on how and where to add comments:\n‚ÄúAdd a detailed paragraph at the top of the code describing what the code is doing, and add detailed comments explaining every line of code‚Äù instruction = ''' Add a detailed paragraph at the top of the code describing what the code is doing, and add detailed comments explaining every line of code ''' response = openai.Edit.create(input=generated_code, instruction=instruction, engine=\"code-davinci-edit-001\", temperature=1, top_p=0.2) documented_code = response[\"choices\"][0][\"text\"] print(documented_code) Output:\nHere you can see the detailed description of the full program, you can also see that the additional comments were automatically added under the function definition describing each line of code.\nIf you‚Äôre new to XGBoost, you can also use the generated documentation to learn about what each of the hyperparameters mean! Now you know that eta is actually the learning rate, and max_depth is the maximum depth of each of the 20 trees XGBoost uses. How cool is that?\nWe now have a fully functional and documented code that you can use to submit your results to the Titanic Kaggle competition!\nNow it‚Äôs your turn! If this piqued your interest head on over to https://openai.com/api/login/ and create your free trial account. I‚Äôm making all the code used in this blog post is available as a Jupyter notebook on GitHub so you can run the entire example with a single click\nNow it‚Äôs your turn! How will you use Codex‚Äôs new edit feature? Let me know by reaching out to me at @shshnkp ","categories":"","description":"Use OpenAI CODEX to automatically edit existing code to add documentation, only using only natural language instructions","excerpt":"Use OpenAI CODEX to automatically edit existing code to add ‚Ä¶","ref":"/automatically-generate-code-and-documentation-using-openai-codex/","tags":["openai","codex","AI"],"title":"Automatically generate code and documentation using OpenAI CODEX"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/codex/","tags":"","title":"codex"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/openai/","tags":"","title":"openai"},{"body":"Let‚Äôs start by answering the question ‚ÄúWhat is an AI accelerator?‚Äù An AI accelerator is a dedicated processor designed to accelerate machine learning computations. Machine learning, and particularly its subset, deep learning is primarily composed of a large number of linear algebra computations, (i.e. matrix-matrix, matrix-vector operations) and these operations can be easily parallelized. AI accelerators are specialized hardware designed to accelerate these basic machine learning computations and improve performance, reduce latency and reduce cost of deploying machine learning based applications.\nDo I need an AI accelerator for machine learning (ML) inference? Let‚Äôs say you have an ML model as part of your software application. The prediction step (or inference) is often the most time consuming part of your application that directly affects user experience. A model that takes several hundreds of milliseconds to generate text translations or apply filters to images or generate product recommendations, can drive users away from your ‚Äúsluggish‚Äù, ‚Äúslow‚Äù, ‚Äúfrustrating to use‚Äù app. By speeding up inference, you can reduce the overall application latency and deliver an app experience that can be described as ‚Äúsmooth‚Äù, ‚Äúsnappy‚Äù, and ‚Äúdelightful to use‚Äù. And you can speed up inference by offloading ML model prediction computation to an AI accelerator. With great market needs comes great many product alternatives, so naturally there is more than one way to accelerate your ML models in the cloud. In this blog post, I‚Äôll explore three popular options:\nGPUs: Particularly, the high-performance NVIDIA T4 and NVIDIA V100 GPUs AWS Inferentia: A custom designed machine learning inference chip by AWS Amazon Elastic Inference (EI): An accelerator that saves cost by giving you access to variable-size GPU acceleration, for models that don‚Äôt need a dedicated GPU Read the full blog post here: A complete guide to AI accelerators for deep learning inference ‚Äî GPUs, AWS Inferentia and Amazon Elastic Inference ","categories":"","description":"Learn about CPUs, GPUs, AWS Inferentia, and Amazon Elastic Inference and how to choose the right AI accelerator for inference deployment","excerpt":"Learn about CPUs, GPUs, AWS Inferentia, and Amazon Elastic Inference ‚Ä¶","ref":"/a-complete-guide-to-ai-accelerators-for-deep-learning-inference-gpus-aws-inferentia-and-amazon-elastic-inference/","tags":["ai accelerators","gpu"],"title":"A complete guide to AI accelerators for deep learning inference ‚Äî GPUs, AWS Inferentia and Amazon Elastic Inference"},{"body":"On AWS, you can launch GPU instances with different GPU memory sizes (8 GB, 16 GB, 24 GB, 32 GB, 40 GB), NVIDIA GPU generations (Ampere, Turing, Volta, Maxwell, Kepler) different capabilities (FP64, FP32, FP16, INT8, Sparsity, TensorCores, NVLink), different number of GPUs per instance (1, 2, 4, 8, 16), and paired with different CPUs (Intel, AMD, Graviton2). You can also select instances with different vCPUs (core thread count), system memory and network bandwidth and add a range of storage options (object storage, network file systems, block storage, etc.) ‚Äî in summary, you have options.\nMy goal with this blog post is to provide you with guidance on how you can choose the right GPU instance on AWS for your deep learning projects. I‚Äôll discuss key features and benefits of various EC2 GPU instances, and workloads that are best suited for each instance type and size. If you‚Äôre new to AWS, or new to GPUs, or new to deep learning, my hope is that you‚Äôll find the information you need to make the right choice for your projects.\nTopics covered in this blog post: Key recommendations for the busy data scientist/ML practitioner Why you should choose the right GPU instance not just the right GPU Deep dive on GPU instance types: P4, P3, G5 (G5g), G4, P2 and G3 Other machine learning accelerators and instances on AWS Cost optimization tips when using GPU instances for ML What software and frameworks to use on AWS? Which GPUs to consider for HPC use-cases? A complete and unapologetically detailed spreadsheet of all AWS GPU instances and their features Read the full blog post here: Choosing the right GPU for deep learning on AWS ","categories":"","description":"How to choose the right Amazon EC2 GPU instance for deep learning training and inference ‚Äî from best performance to the most cost-effective and everything in-between","excerpt":"How to choose the right Amazon EC2 GPU instance for deep learning ‚Ä¶","ref":"/choosing-the-right-gpu-for-deep-learning-on-aws/","tags":["aws","gpu"],"title":"Choosing the right GPU for deep learning on AWS"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"}]