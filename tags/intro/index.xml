<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Goldydocs – intro</title><link>/tags/intro/</link><description>Recent content in intro on Goldydocs</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 04 Jan 2017 00:00:00 +0000</lastBuildDate><atom:link href="/tags/intro/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started: Getting Started</title><link>/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/getting-started/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This is a placeholder page that shows you how to use this template site.&lt;/p>
&lt;/div>
&lt;p>Information in this section helps your user try your project themselves.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>What do your users need to do to start using your project? This could include downloading/installation instructions, including any prerequisites or system requirements.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Introductory “Hello World” example, if appropriate. More complex tutorials should live in the Tutorials section.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Consider using the headings below for your getting started page. You can delete any that are not applicable to your project.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>Is there any initial setup users need to do after installation to try your project?&lt;/p>
&lt;h2 id="try-it-out">Try it out!&lt;/h2>
&lt;p>Can your users test their installation, for example by running a commmand or deploying a Hello World example?&lt;/p></description></item><item><title>Concepts: Concepts</title><link>/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/concepts/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This is a placeholder page that shows you how to use this template site.&lt;/p>
&lt;/div>
&lt;p>For many projects, users may not need much information beyond the information in the &lt;a href="/docs/overview/">Overview&lt;/a>, so this section is &lt;strong>optional&lt;/strong>. However if there are areas where your users will need a more detailed understanding of a given term or feature in order to do anything useful with your project (or to not make mistakes when using it) put that information in this section. For example, you may want to add some conceptual pages if you have a large project with many components and a complex architecture.&lt;/p>
&lt;p>Remember to focus on what the user needs to know, not just what you think is interesting about your project! If they don’t need to understand your original design decisions to use or contribute to the project, don’t put them in, or include your design docs in your repo and link to them. Similarly, most users will probably need to know more about how features work when in use rather than how they are implemented. Consider a separate architecture page for more detailed implementation and system design information that potential project contributors can consult.&lt;/p></description></item><item><title>Tutorials: Tutorials</title><link>/tutorials/</link><pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate><guid>/tutorials/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This is a placeholder page that shows you how to use this template site.&lt;/p>
&lt;/div>
&lt;p>Tutorials are &lt;strong>complete worked examples&lt;/strong> made up of &lt;strong>multiple tasks&lt;/strong> that guide the user through a relatively simple but realistic scenario: building an application that uses some of your project’s features, for example. If you have already created some Examples for your project you can base Tutorials on them. This section is &lt;strong>optional&lt;/strong>. However, remember that although you may not need this section at first, having tutorials can be useful to help your users engage with your example code, especially if there are aspects that need more explanation than you can easily provide in code comments.&lt;/p></description></item><item><title>Reference: Reference</title><link>/reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This is a placeholder page that shows you how to use this template site.&lt;/p>
&lt;/div>
&lt;p>If your project has an API, configuration, or other reference - anything that users need to look up that’s at an even lower level than a single task - put (or link to it) here. You can serve and link to generated reference docs created using Doxygen,
Javadoc, or other doc generation tools by putting them in your &lt;code>static/&lt;/code> directory. Find out more in &lt;a href="https://docsy.dev/docs/adding-content/content/#adding-static-content">Adding static content&lt;/a>. For OpenAPI reference, Docsy also provides a &lt;a href="https://www.docsy.dev/docs/adding-content/shortcodes/#swaggerui">Swagger UI layout and shortcode&lt;/a> that renders &lt;a href="https://swagger.io/tools/swagger-ui/">Swagger UI&lt;/a> using any OpenAPI YAML or JSON file as source.&lt;/p></description></item><item><title>: Documentation</title><link>/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This is a placeholder page that shows you how to use this template site.&lt;/p>
&lt;/div>
&lt;p>This section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project.&lt;/p>
&lt;p>For large documentation sets we recommend adding content under the headings in this section, though if some or all of them don’t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the &lt;a href="https://docsy.dev/docs/">Docsy User Guide&lt;/a>, which lives in the &lt;a href="https://github.com/google/docsy/tree/master/userguide">Docsy theme repo&lt;/a> if you&amp;rsquo;d like to copy its docs section.&lt;/p>
&lt;p>Other content such as marketing material, case studies, and community updates should live in the &lt;a href="/about/">About&lt;/a> and &lt;a href="/community/">Community&lt;/a> pages.&lt;/p>
&lt;p>Find out how to use the Docsy theme in the &lt;a href="https://docsy.dev/docs/">Docsy User Guide&lt;/a>. You can learn more about how to organize your documentation (and how we organized this site) in &lt;a href="https://docsy.dev/docs/best-practices/organizing-content/">Organizing Your Content&lt;/a>.&lt;/p></description></item></channel></rss>